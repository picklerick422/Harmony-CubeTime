‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄k’if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
import TimeManagementService from '../services/TimeManagementService';
import { TimerDisplay } from '../components/TimerDisplay';
import { navigationManager } from '../utils/NavigationManager';
class Dashboard extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.timerOpacity = 1;
        this.timerScale = 1;
        this.navOpacity = 1;
        this.navScale = 1;
        this.__timeLeft = new ObservedPropertySimplePU(0, this, "timeLeft");
        this.__isRunning = new ObservedPropertySimplePU(false, this, "isRunning");
        this.__currentMode = new ObservedPropertySimplePU('Work', this, "currentMode");
        this.__statistics = new ObservedPropertyObjectPU({
            totalSessions: 0,
            totalTime: 0,
            totalFocusTime: 0,
            todaySessions: 0,
            todayTime: 0,
            todayFocusTime: 0,
            weekSessions: 0,
            weekTime: 0,
            monthSessions: 0,
            monthTime: 0,
            sessionsCount: 0,
            currentStreak: 0,
            modeStats: {}
        }, this, "statistics");
        this.__totalFocusTime = new ObservedPropertySimplePU(0, this, "totalFocusTime");
        this.__todayFocusTime = new ObservedPropertySimplePU(0, this, "todayFocusTime");
        this.__sessionsCount = new ObservedPropertySimplePU(0, this, "sessionsCount");
        this.__currentStreak = new ObservedPropertySimplePU(0, this, "currentStreak");
        this.__titleScale = new ObservedPropertySimplePU(0.8, this, "titleScale");
        this.__titleOpacity = new ObservedPropertySimplePU(0, this, "titleOpacity");
        this.__cardScale = new ObservedPropertySimplePU(0.8, this, "cardScale");
        this.__cardOpacity = new ObservedPropertySimplePU(0, this, "cardOpacity");
        this.__itemScale = new ObservedPropertySimplePU(0.8, this, "itemScale");
        this.__itemOpacity = new ObservedPropertySimplePU(0, this, "itemOpacity");
        this.__buttonScale = new ObservedPropertySimplePU(0.8, this, "buttonScale");
        this.__buttonOpacity = new ObservedPropertySimplePU(0, this, "buttonOpacity");
        this.timeService = TimeManagementService.getInstance();
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params) {
        if (params.timerOpacity !== undefined) {
            this.timerOpacity = params.timerOpacity;
        }
        if (params.timerScale !== undefined) {
            this.timerScale = params.timerScale;
        }
        if (params.navOpacity !== undefined) {
            this.navOpacity = params.navOpacity;
        }
        if (params.navScale !== undefined) {
            this.navScale = params.navScale;
        }
        if (params.timeLeft !== undefined) {
            this.timeLeft = params.timeLeft;
        }
        if (params.isRunning !== undefined) {
            this.isRunning = params.isRunning;
        }
        if (params.currentMode !== undefined) {
            this.currentMode = params.currentMode;
        }
        if (params.statistics !== undefined) {
            this.statistics = params.statistics;
        }
        if (params.totalFocusTime !== undefined) {
            this.totalFocusTime = params.totalFocusTime;
        }
        if (params.todayFocusTime !== undefined) {
            this.todayFocusTime = params.todayFocusTime;
        }
        if (params.sessionsCount !== undefined) {
            this.sessionsCount = params.sessionsCount;
        }
        if (params.currentStreak !== undefined) {
            this.currentStreak = params.currentStreak;
        }
        if (params.titleScale !== undefined) {
            this.titleScale = params.titleScale;
        }
        if (params.titleOpacity !== undefined) {
            this.titleOpacity = params.titleOpacity;
        }
        if (params.cardScale !== undefined) {
            this.cardScale = params.cardScale;
        }
        if (params.cardOpacity !== undefined) {
            this.cardOpacity = params.cardOpacity;
        }
        if (params.itemScale !== undefined) {
            this.itemScale = params.itemScale;
        }
        if (params.itemOpacity !== undefined) {
            this.itemOpacity = params.itemOpacity;
        }
        if (params.buttonScale !== undefined) {
            this.buttonScale = params.buttonScale;
        }
        if (params.buttonOpacity !== undefined) {
            this.buttonOpacity = params.buttonOpacity;
        }
        if (params.timeService !== undefined) {
            this.timeService = params.timeService;
        }
    }
    updateStateVars(params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__timeLeft.purgeDependencyOnElmtId(rmElmtId);
        this.__isRunning.purgeDependencyOnElmtId(rmElmtId);
        this.__currentMode.purgeDependencyOnElmtId(rmElmtId);
        this.__statistics.purgeDependencyOnElmtId(rmElmtId);
        this.__totalFocusTime.purgeDependencyOnElmtId(rmElmtId);
        this.__todayFocusTime.purgeDependencyOnElmtId(rmElmtId);
        this.__sessionsCount.purgeDependencyOnElmtId(rmElmtId);
        this.__currentStreak.purgeDependencyOnElmtId(rmElmtId);
        this.__titleScale.purgeDependencyOnElmtId(rmElmtId);
        this.__titleOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__cardScale.purgeDependencyOnElmtId(rmElmtId);
        this.__cardOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__itemScale.purgeDependencyOnElmtId(rmElmtId);
        this.__itemOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__buttonScale.purgeDependencyOnElmtId(rmElmtId);
        this.__buttonOpacity.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__timeLeft.aboutToBeDeleted();
        this.__isRunning.aboutToBeDeleted();
        this.__currentMode.aboutToBeDeleted();
        this.__statistics.aboutToBeDeleted();
        this.__totalFocusTime.aboutToBeDeleted();
        this.__todayFocusTime.aboutToBeDeleted();
        this.__sessionsCount.aboutToBeDeleted();
        this.__currentStreak.aboutToBeDeleted();
        this.__titleScale.aboutToBeDeleted();
        this.__titleOpacity.aboutToBeDeleted();
        this.__cardScale.aboutToBeDeleted();
        this.__cardOpacity.aboutToBeDeleted();
        this.__itemScale.aboutToBeDeleted();
        this.__itemOpacity.aboutToBeDeleted();
        this.__buttonScale.aboutToBeDeleted();
        this.__buttonOpacity.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    get timeLeft() {
        return this.__timeLeft.get();
    }
    set timeLeft(newValue) {
        this.__timeLeft.set(newValue);
    }
    get isRunning() {
        return this.__isRunning.get();
    }
    set isRunning(newValue) {
        this.__isRunning.set(newValue);
    }
    get currentMode() {
        return this.__currentMode.get();
    }
    set currentMode(newValue) {
        this.__currentMode.set(newValue);
    }
    get statistics() {
        return this.__statistics.get();
    }
    set statistics(newValue) {
        this.__statistics.set(newValue);
    }
    get totalFocusTime() {
        return this.__totalFocusTime.get();
    }
    set totalFocusTime(newValue) {
        this.__totalFocusTime.set(newValue);
    }
    get todayFocusTime() {
        return this.__todayFocusTime.get();
    }
    set todayFocusTime(newValue) {
        this.__todayFocusTime.set(newValue);
    }
    get sessionsCount() {
        return this.__sessionsCount.get();
    }
    set sessionsCount(newValue) {
        this.__sessionsCount.set(newValue);
    }
    get currentStreak() {
        return this.__currentStreak.get();
    }
    set currentStreak(newValue) {
        this.__currentStreak.set(newValue);
    }
    get titleScale() {
        return this.__titleScale.get();
    }
    set titleScale(newValue) {
        this.__titleScale.set(newValue);
    }
    get titleOpacity() {
        return this.__titleOpacity.get();
    }
    set titleOpacity(newValue) {
        this.__titleOpacity.set(newValue);
    }
    get cardScale() {
        return this.__cardScale.get();
    }
    set cardScale(newValue) {
        this.__cardScale.set(newValue);
    }
    get cardOpacity() {
        return this.__cardOpacity.get();
    }
    set cardOpacity(newValue) {
        this.__cardOpacity.set(newValue);
    }
    get itemScale() {
        return this.__itemScale.get();
    }
    set itemScale(newValue) {
        this.__itemScale.set(newValue);
    }
    get itemOpacity() {
        return this.__itemOpacity.get();
    }
    set itemOpacity(newValue) {
        this.__itemOpacity.set(newValue);
    }
    get buttonScale() {
        return this.__buttonScale.get();
    }
    set buttonScale(newValue) {
        this.__buttonScale.set(newValue);
    }
    get buttonOpacity() {
        return this.__buttonOpacity.get();
    }
    set buttonOpacity(newValue) {
        this.__buttonOpacity.set(newValue);
    }
    // È°µÈù¢ÂÖ•Âú∫Âä®Áîª - Êõ¥Âø´Êõ¥ÊúâÂºπÊÄß
    animateIn() {
        // Ê†áÈ¢òÂä®Áîª - ÂºπÊÄßËøõÂÖ•
        Context.animateTo({
            duration: 350,
            curve: Curve.Friction
        }, () => {
            this.titleScale = 1;
            this.titleOpacity = 1;
        });
        // Âç°ÁâáÂä®Áîª - ËΩªÂæÆÂª∂ËøüÁöÑÂºπÊÄßÊïàÊûú
        Context.animateTo({
            duration: 400,
            curve: Curve.Friction,
            delay: 80
        }, () => {
            this.cardScale = 1;
            this.cardOpacity = 1;
        });
        // È°πÁõÆÂä®Áîª - Êõ¥ÊúâÂºπÊÄßÁöÑÊïàÊûú
        Context.animateTo({
            duration: 450,
            curve: Curve.Friction,
            delay: 150
        }, () => {
            this.itemScale = 1;
            this.itemOpacity = 1;
        });
        // ÊåâÈíÆÂä®Áîª - ÂºπÊÄßÊïàÊûú
        Context.animateTo({
            duration: 500,
            curve: Curve.Friction,
            delay: 220
        }, () => {
            this.buttonScale = 1;
            this.buttonOpacity = 1;
        });
    }
    async aboutToAppear() {
        this.generateScramble();
        this.loadBestTime();
        // È¶ñÊ¨°ËøõÂÖ•Êó∂Áõ¥Êé•ÊâßË°åÂä®ÁîªÔºå‰∏çÈáçÁΩÆÁä∂ÊÄÅ
        this.animateIn();
    }
    onPageShow() {
        // È°µÈù¢ÈáçÊñ∞ÊòæÁ§∫Êó∂ÈáçÁΩÆÂèØËßÅÊÄßÂíåÂä®Áîª
        this.resetVisibility();
        this.animateIn();
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width('100%');
            Column.height('100%');
            Column.backgroundColor('#F2F2F7');
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
            Column.create();
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
            Column.width('100%');
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
            Column.backgroundColor('#6366F1');
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
            Column.expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP]);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width('100%');
            Row.height(56);
            Row.padding({ left: 16, right: 16 });
            Row.justifyContent(FlexAlign.Center);
            Row.alignItems(VerticalAlign.Center);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 16777247, "type": 20000, params: [], "bundleName": "com.example.cubetime", "moduleName": "entry" });
            Image.width(24);
            Image.height(24);
            Image.fillColor(Color.White);
            Image.onClick(() => {
                // ‰ΩøÁî®Ëá™ÂÆö‰πâËøîÂõûÂä®Áîª
                Context.animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                });
                setTimeout(() => {
                    navigationManager.navigateBack();
                }, 300);
            });
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('‰ª™Ë°®Áõò');
            Text.fontSize(20);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor(Color.White);
            Text.layoutWeight(1);
            Text.textAlign(TextAlign.Center);
            Text.scale({ x: this.titleScale, y: this.titleScale });
            Text.opacity(this.titleOpacity);
        }, Text);
        Text.pop();
        Row.pop();
        // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Scroll.create();
            Scroll.layoutWeight(1);
            Scroll.backgroundColor('#F2F2F7');
            Scroll.edgeEffect(EdgeEffect.Spring);
        }, Scroll);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width('100%');
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Timer Section
            Column.create();
            // Timer Section
            Column.width('100%');
            // Timer Section
            Column.padding(16);
            // Timer Section
            Column.backgroundColor('#FFFFFF');
            // Timer Section
            Column.borderRadius(12);
            // Timer Section
            Column.margin({ left: 16, right: 16, top: 16, bottom: 16 });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            __Common__.create();
            __Common__.scale({ x: this.cardScale, y: this.cardScale });
            __Common__.opacity(this.cardOpacity);
        }, __Common__);
        {
            this.observeComponentCreation2((elmtId, isInitialRender) => {
                if (isInitialRender) {
                    let componentCall = new TimerDisplay(this, {
                        timeLeft: this.timeLeft,
                        isRunning: this.isRunning,
                        currentMode: this.currentMode
                    }, undefined, elmtId, () => { }, { page: "entry/src/main/ets/pages/Dashboard.ets", line: 150, col: 13 });
                    ViewPU.create(componentCall);
                    let paramsLambda = () => {
                        return {
                            timeLeft: this.timeLeft,
                            isRunning: this.isRunning,
                            currentMode: this.currentMode
                        };
                    };
                    componentCall.paramsGenerator_ = paramsLambda;
                }
                else {
                    this.updateStateVarsOfChildByElmtId(elmtId, {
                        timeLeft: this.timeLeft,
                        isRunning: this.isRunning,
                        currentMode: this.currentMode
                    });
                }
            }, { name: "TimerDisplay" });
        }
        __Common__.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create({ space: 16 });
            Row.margin({ top: 16 });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Start');
            Button.width(100);
            Button.onClick(() => {
                this.timeService.startPomodoro();
            });
            Button.visibility(this.isRunning ? Visibility.None : Visibility.Visible);
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Pause');
            Button.width(100);
            Button.onClick(() => {
                this.timeService.stopTiming();
            });
            Button.visibility(this.isRunning ? Visibility.Visible : Visibility.None);
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Reset');
            Button.width(100);
            Button.onClick(() => {
                this.timeService.stopTiming();
            });
        }, Button);
        Button.pop();
        Row.pop();
        // Timer Section
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Statistics Section
            Column.create();
            // Statistics Section
            Column.width('100%');
            // Statistics Section
            Column.padding(16);
            // Statistics Section
            Column.backgroundColor('#FFFFFF');
            // Statistics Section
            Column.borderRadius(12);
            // Statistics Section
            Column.margin({ left: 16, right: 16 });
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Statistics');
            Text.fontSize(18);
            Text.fontWeight(FontWeight.Bold);
            Text.margin({ bottom: 12 });
            Text.scale({ x: this.itemScale, y: this.itemScale });
            Text.opacity(this.itemOpacity);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.layoutWeight(1);
            Column.alignItems(HorizontalAlign.Center);
            Column.scale({ x: this.itemScale, y: this.itemScale });
            Column.opacity(this.itemOpacity);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Total Focus');
            Text.fontSize(12);
            Text.fontColor('#666666');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`${Math.floor(this.totalFocusTime / 60)} min`);
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.layoutWeight(1);
            Column.alignItems(HorizontalAlign.Center);
            Column.scale({ x: this.itemScale, y: this.itemScale });
            Column.opacity(this.itemOpacity);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Today');
            Text.fontSize(12);
            Text.fontColor('#666666');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`${Math.floor(this.todayFocusTime / 60)} min`);
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.layoutWeight(1);
            Column.alignItems(HorizontalAlign.Center);
            Column.scale({ x: this.itemScale, y: this.itemScale });
            Column.opacity(this.itemOpacity);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Sessions');
            Text.fontSize(12);
            Text.fontColor('#666666');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.sessionsCount.toString());
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.layoutWeight(1);
            Column.alignItems(HorizontalAlign.Center);
            Column.scale({ x: this.itemScale, y: this.itemScale });
            Column.opacity(this.itemOpacity);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Streak');
            Text.fontSize(12);
            Text.fontColor('#666666');
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(`${this.currentStreak} days`);
            Text.fontSize(16);
            Text.fontWeight(FontWeight.Bold);
        }, Text);
        Text.pop();
        Column.pop();
        Row.pop();
        // Statistics Section
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Quick Actions
            Row.create({ space: 16 });
            // Quick Actions
            Row.width('100%');
            // Quick Actions
            Row.padding({ left: 16, right: 16, top: 16, bottom: 16 });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Tasks');
            Button.layoutWeight(1);
            Button.onClick(() => {
                // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                Context.animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                });
                setTimeout(() => {
                    navigationManager.navigateTo('pages/Tasks');
                }, 300);
            });
            Button.scale({ x: this.buttonScale, y: this.buttonScale });
            Button.opacity(this.buttonOpacity);
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Calendar');
            Button.layoutWeight(1);
            Button.onClick(() => {
                // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                Context.animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                });
                setTimeout(() => {
                    navigationManager.navigateTo('pages/Calendar');
                }, 300);
            });
            Button.scale({ x: this.buttonScale, y: this.buttonScale });
            Button.opacity(this.buttonOpacity);
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('Settings');
            Button.layoutWeight(1);
            Button.onClick(() => {
                // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                Context.animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                });
                setTimeout(() => {
                    navigationManager.navigateTo('pages/Settings');
                }, 300);
            });
            Button.scale({ x: this.buttonScale, y: this.buttonScale });
            Button.opacity(this.buttonOpacity);
        }, Button);
        Button.pop();
        // Quick Actions
        Row.pop();
        Column.pop();
        Scroll.pop();
        Column.pop();
    }
    // ÁîüÊàêÊâì‰π±Ê≠•È™§
    generateScramble() {
        const moves = ["R", "U", "F", "L", "D", "B"];
        const modifiers = ["", "'", "2"];
        let scramble = "";
        for (let i = 0; i < 20; i++) {
            scramble += moves[Math.floor(Math.random() * moves.length)] +
                modifiers[Math.floor(Math.random() * modifiers.length)] + " ";
        }
        return scramble.trim();
    }
    // Âä†ËΩΩÊúÄ‰Ω≥Êó∂Èó¥
    loadBestTime() {
        return 0;
    }
    // ÈáçÁΩÆÂèØËßÅÊÄß
    resetVisibility() {
        this.titleOpacity = 1;
        this.titleScale = 1;
        this.buttonOpacity = 1;
        this.buttonScale = 1;
        this.cardOpacity = 1;
        this.cardScale = 1;
        this.itemOpacity = 1;
        this.itemScale = 1;
        this.timerOpacity = 1;
        this.timerScale = 1;
        this.navOpacity = 1;
        this.navScale = 1;
    }
    // È°µÈù¢ÂàáÊç¢Âä®Áîª - Â∫ïÈÉ®ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®
    animateTransition(callback) {
        Context.animateTo({
            duration: 400,
            curve: Curve.Friction,
            onFinish: callback
        }, () => {
            // ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®ÔºåÂè™ÈöêËóèÂÖ∂‰ªñÂÖÉÁ¥†
            this.titleOpacity = 0;
            this.titleScale = 0.3;
            this.buttonOpacity = 0;
            this.buttonScale = 0.3;
            this.cardOpacity = 0;
            this.cardScale = 0.3;
            this.itemOpacity = 0;
            this.itemScale = 0.3;
            this.timerOpacity = 0;
            this.timerScale = 0.3;
            // ÂØºËà™Êù°‰øùÊåÅÂèØËßÅÂíåÂéüÂßãÂ§ßÂ∞è
            this.navOpacity = 1;
            this.navScale = 1;
        });
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName() {
        return "Dashboard";
    }
}
registerNamedRoute(() => new Dashboard(undefined, {}), "", { bundleName: "com.example.cubetime", moduleName: "entry", pagePath: "pages/Dashboard", pageFullPath: "entry/src/main/ets/pages/Dashboard", integratedHsp: "false", moduleType: "followWithHap" });
//# sourceMappingURL=Dashboard.js.map¬ìŸKE:\Deveco_Project\test\entry\src\main\ets\services\TimeManagementService.tsŸEE:\Deveco_Project\test\entry\src\main\ets\components\TimerDisplay.etsŸEE:\Deveco_Project\test\entry\src\main\ets\utils\NavigationManager.etsŸ=E:\Deveco_Project\test\entry\src\main\ets\pages\Dashboard.ets‘rBö™moduleName±isLocalDependencyØisNodeEntryFileßpkgPath±belongProjectPathßpkgName™pkgVersion±dependencyPkgInfo∞belongModulePath¨shouldEmitJs•entry√¬ºE:\Deveco_Project\test\entry∂E:\Deveco_Project\test•entry•1.0.0‘  ºE:\Deveco_Project\test\entry√√⁄0 import TimeManagementService, { StatisticsData } from '../services/TimeManagementService'
import DataStorage from '../utils/DataStorage'
import { TimerDisplay } from '../components/TimerDisplay'
import { navigationManager, TransitionType } from '../utils/NavigationManager'

@Entry
@Component
struct Dashboard {
  timerOpacity: number = 1
  timerScale: number = 1
  navOpacity: number = 1
  navScale: number = 1

  @State timeLeft: number = 0
  @State isRunning: boolean = false
  @State currentMode: string = 'Work'
  @State private statistics: StatisticsData = { 
    totalSessions: 0, 
    totalTime: 0, 
    totalFocusTime: 0, 
    todaySessions: 0, 
    todayTime: 0, 
    todayFocusTime: 0, 
    weekSessions: 0, 
    weekTime: 0, 
    monthSessions: 0, 
    monthTime: 0, 
    sessionsCount: 0, 
    currentStreak: 0,
    modeStats: {}
  }
  @State private totalFocusTime: number = 0
  @State private todayFocusTime: number = 0
  @State private sessionsCount: number = 0
  @State private currentStreak: number = 0
  @State private titleScale: number = 0.8
  @State private titleOpacity: number = 0
  @State private cardScale: number = 0.8
  @State private cardOpacity: number = 0
  @State private itemScale: number = 0.8
  @State private itemOpacity: number = 0
  @State private buttonScale: number = 0.8
  @State private buttonOpacity: number = 0

  private timeService: TimeManagementService = TimeManagementService.getInstance();

  // È°µÈù¢ÂÖ•Âú∫Âä®Áîª - Êõ¥Âø´Êõ¥ÊúâÂºπÊÄß
  private animateIn() {
    // Ê†áÈ¢òÂä®Áîª - ÂºπÊÄßËøõÂÖ•
    animateTo({ 
      duration: 350, 
      curve: Curve.Friction
    }, () => {
      this.titleScale = 1
      this.titleOpacity = 1
    })
    
    // Âç°ÁâáÂä®Áîª - ËΩªÂæÆÂª∂ËøüÁöÑÂºπÊÄßÊïàÊûú
    animateTo({ 
      duration: 400, 
      curve: Curve.Friction,
      delay: 80
    }, () => {
      this.cardScale = 1
      this.cardOpacity = 1
    })
    
    // È°πÁõÆÂä®Áîª - Êõ¥ÊúâÂºπÊÄßÁöÑÊïàÊûú
    animateTo({ 
      duration: 450, 
      curve: Curve.Friction,
      delay: 150
    }, () => {
      this.itemScale = 1
      this.itemOpacity = 1
    })
    
    // ÊåâÈíÆÂä®Áîª - ÂºπÊÄßÊïàÊûú
    animateTo({ 
      duration: 500, 
      curve: Curve.Friction,
      delay: 220
    }, () => {
      this.buttonScale = 1
      this.buttonOpacity = 1
    })
  }

  async aboutToAppear() {
    this.generateScramble()
    this.loadBestTime()
    // È¶ñÊ¨°ËøõÂÖ•Êó∂Áõ¥Êé•ÊâßË°åÂä®ÁîªÔºå‰∏çÈáçÁΩÆÁä∂ÊÄÅ
    this.animateIn()
  }

  onPageShow() {
    // È°µÈù¢ÈáçÊñ∞ÊòæÁ§∫Êó∂ÈáçÁΩÆÂèØËßÅÊÄßÂíåÂä®Áîª
    this.resetVisibility()
    this.animateIn()
  }

  build() {
    Column() {
      // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÔºåË¶ÜÁõñÊï¥‰∏™È°∂ÈÉ®ÂåÖÊã¨Áä∂ÊÄÅÊ†è
      Column() {
        Row() {
              Image($r('app.media.ic_back'))
                .width(24)
                .height(24)
                .fillColor(Color.White)
                .onClick(() => {
                  // ‰ΩøÁî®Ëá™ÂÆö‰πâËøîÂõûÂä®Áîª
                  animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                  });
                  setTimeout(() => {
                    navigationManager.navigateBack();
                  }, 300);
                })
              
              Text('‰ª™Ë°®Áõò')
                .fontSize(20)
                .fontWeight(FontWeight.Bold)
                .fontColor(Color.White)
                .layoutWeight(1)
                .textAlign(TextAlign.Center)
                .scale({ x: this.titleScale, y: this.titleScale }).opacity(this.titleOpacity)
            }
        .width('100%')
        .height(56)
        .padding({ left: 16, right: 16 })
        .justifyContent(FlexAlign.Center)
        .alignItems(VerticalAlign.Center)
      }
      .width('100%')
      .backgroundColor('#6366F1')
      .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])

      Scroll() {
        Column() {
          // Timer Section
          Column() {
            TimerDisplay({
              timeLeft: this.timeLeft,
              isRunning: this.isRunning,
              currentMode: this.currentMode
            }).scale({ x: this.cardScale, y: this.cardScale }).opacity(this.cardOpacity)

            Row({ space: 16 }) {
              Button('Start')
                .width(100)
                .onClick(() => {
                  this.timeService.startPomodoro();
                })
                .visibility(this.isRunning ? Visibility.None : Visibility.Visible)

              Button('Pause')
                .width(100)
                .onClick(() => {
                  this.timeService.stopTiming();
                })
                .visibility(this.isRunning ? Visibility.Visible : Visibility.None)

              Button('Reset')
                .width(100)
                .onClick(() => {
                  this.timeService.stopTiming();
                })
            }
            .margin({ top: 16 })
          }
          .width('100%')
          .padding(16)
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .margin({ left: 16, right: 16, top: 16, bottom: 16 })

          // Statistics Section
          Column() {
            Text('Statistics')
              .fontSize(18)
              .fontWeight(FontWeight.Bold)
              .margin({ bottom: 12 })
              .scale({ x: this.itemScale, y: this.itemScale }).opacity(this.itemOpacity)

            Row() {
              Column() {
                Text('Total Focus')
                  .fontSize(12)
                  .fontColor('#666666')
                Text(`${Math.floor(this.totalFocusTime / 60)} min`)
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Center)
              .scale({ x: this.itemScale, y: this.itemScale }).opacity(this.itemOpacity)

              Column() {
                Text('Today')
                  .fontSize(12)
                  .fontColor('#666666')
                Text(`${Math.floor(this.todayFocusTime / 60)} min`)
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Center)
              .scale({ x: this.itemScale, y: this.itemScale }).opacity(this.itemOpacity)

              Column() {
                Text('Sessions')
                  .fontSize(12)
                  .fontColor('#666666')
                Text(this.sessionsCount.toString())
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Center)
              .scale({ x: this.itemScale, y: this.itemScale }).opacity(this.itemOpacity)

              Column() {
                Text('Streak')
                  .fontSize(12)
                  .fontColor('#666666')
                Text(`${this.currentStreak} days`)
                  .fontSize(16)
                  .fontWeight(FontWeight.Bold)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Center)
              .scale({ x: this.itemScale, y: this.itemScale }).opacity(this.itemOpacity)
            }
          }
          .width('100%')
          .padding(16)
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .margin({ left: 16, right: 16 })

          // Quick Actions
          Row({ space: 16 }) {
            Button('Tasks')
              .layoutWeight(1)
              .onClick(() => {
                  // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                  animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                  });
                  setTimeout(() => {
                    navigationManager.navigateTo('pages/Tasks');
                  }, 300);
                })
              .scale({ x: this.buttonScale, y: this.buttonScale }).opacity(this.buttonOpacity)

            Button('Calendar')
              .layoutWeight(1)
              .onClick(() => {
                  // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                  animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                  });
                  setTimeout(() => {
                    navigationManager.navigateTo('pages/Calendar');
                  }, 300);
                })
              .scale({ x: this.buttonScale, y: this.buttonScale }).opacity(this.buttonOpacity)

            Button('Settings')
              .layoutWeight(1)
              .onClick(() => {
                  // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàó
                  animateTo({ duration: 300, curve: Curve.Friction }, () => {
                    this.titleOpacity = 0;
                    this.titleScale = 0.3;
                    this.cardOpacity = 0;
                    this.cardScale = 0.3;
                    this.itemOpacity = 0;
                    this.itemScale = 0.3;
                    this.buttonOpacity = 0;
                    this.buttonScale = 0.3;
                  });
                  setTimeout(() => {
                    navigationManager.navigateTo('pages/Settings');
                  }, 300);
                })
              .scale({ x: this.buttonScale, y: this.buttonScale }).opacity(this.buttonOpacity)
          }
          .width('100%')
          .padding({ left: 16, right: 16, top: 16, bottom: 16 })
        }
        .width('100%')
      }
      .layoutWeight(1)
      .backgroundColor('#F2F2F7')
      .edgeEffect(EdgeEffect.Spring)
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F2F2F7')
  }

  // ÁîüÊàêÊâì‰π±Ê≠•È™§
  private generateScramble(): string {
    const moves = ["R", "U", "F", "L", "D", "B"];
    const modifiers = ["", "'", "2"];
    let scramble = "";
    for (let i = 0; i < 20; i++) {
      scramble += moves[Math.floor(Math.random() * moves.length)] + 
                  modifiers[Math.floor(Math.random() * modifiers.length)] + " ";
    }
    return scramble.trim();
  }

  // Âä†ËΩΩÊúÄ‰Ω≥Êó∂Èó¥
  private loadBestTime(): number {
    return 0;
  }

  // ÈáçÁΩÆÂèØËßÅÊÄß
  private resetVisibility(): void {
    this.titleOpacity = 1;
    this.titleScale = 1;
    this.buttonOpacity = 1;
    this.buttonScale = 1;
    this.cardOpacity = 1;
    this.cardScale = 1;
    this.itemOpacity = 1;
    this.itemScale = 1;
    this.timerOpacity = 1;
    this.timerScale = 1;
    this.navOpacity = 1;
    this.navScale = 1;
  }

  // È°µÈù¢ÂàáÊç¢Âä®Áîª - Â∫ïÈÉ®ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®
  private animateTransition(callback: () => void): void {
    animateTo({ 
      duration: 400, 
      curve: Curve.Friction,
      onFinish: callback
    }, () => {
      // ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®ÔºåÂè™ÈöêËóèÂÖ∂‰ªñÂÖÉÁ¥†
      this.titleOpacity = 0;
      this.titleScale = 0.3;
      this.buttonOpacity = 0;
      this.buttonScale = 0.3;
      this.cardOpacity = 0;
      this.cardScale = 0.3;
      this.itemOpacity = 0;
      this.itemScale = 0.3;
      this.timerOpacity = 0;
      this.timerScale = 0.3;
      // ÂØºËà™Êù°‰øùÊåÅÂèØËßÅÂíåÂéüÂßãÂ§ßÂ∞è
      this.navOpacity = 1;
      this.navScale = 1;
    });
  }

}
¿‘rCì∫../utils/NavigationManager∫../components/TimerDisplayŸ!../services/TimeManagementService‘rDó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA¬ŸEE:\Deveco_Project\test\entry\src\main\ets\utils\NavigationManager.etsA√™oh-resolve¬DA¬ŸEE:\Deveco_Project\test\entry\src\main\ets\components\TimerDisplay.etsA√™oh-resolve¬DA¬ŸKE:\Deveco_Project\test\entry\src\main\ets\services\TimeManagementService.tsA√™oh-resolve¬ì‘rEñßversion§file™sourceRootßsources•names®mappings¨Dashboard.js†ë≠Dashboard.etsê‹∏êêêñî    î  î  0î"  6îÃE  ÃYîÃF  ÃYòî   î î	 	î î î î9 9î: 9òî   î î	 	î î ,î" 2î> ÃNî? ÃNíî î ëî  êêêêíî î íî 	î 	íî 
î 
íî î íî7 î8 íî8 î= #íî: îÃ@ %ëî9 .îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î îî î î î ëî	 íî= *î> +íî=  *î>  +íî< !)î= !*íî< ")î= "*íî9 #&î< #)íî; $(î< $)íî8 %%î; %(íî: &'î; &(íî8 '%î; '(íî: ('î; ((íî: )'î= )*íî< *)î= **ïî ,/î0 ,ÃDî1 ,ÃEî< ,ÃPî> ,ÃRêêëî ÃNêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêíî 	î êêíî 	î êêíî 	î êêíî 	î êêíî 	î êêíî 	î êêíî î êêíî î êêíî î êêíî î êêíî  î  êêíî  î  êêíî !î !êêíî !î !êêíî "î "êêíî "î "êêíî #î #êêíî #î #êêíî $î $êêíî $î $êêíî %î %êêíî %î %êêíî &î &êêíî &î &êêíî 'î 'êêíî 'î 'êêíî (î (êêíî (î (êêíî )î )êêíî )î )êêíî *î *êêíî *î *êêíî .î .íî /
î /íî 0î 0íî 1î 1îî 2î 2î 2î 2ñî 3î 3î 3î 3î 3î! 3îî	 4î 4î 4
î 4óî 5î 5
î 5î 5î 5î 5î  5óî 6î 6
î 6î 6î  6î! 6î" 6îî 7î	 7î
 7î 7íî 9î 9íî :î :îî ;î ;î ;î ;ñî <î <î <î <î <î! <îî =î =î =î =îî	 >î >î >
î >óî ?î ?
î ?î ?î ?î ?î ?óî Ã@î Ã@
î Ã@î Ã@î Ã@î  Ã@î! Ã@îî ÃAî	 ÃAî
 ÃAî ÃAíî ÃCî ÃCíî ÃDî ÃDîî ÃEî ÃEî ÃEî ÃEñî ÃFî ÃFî ÃFî ÃFî ÃFî! ÃFîî ÃGî ÃGî ÃGî ÃGîî	 ÃHî ÃHî ÃH
î ÃHóî ÃIî ÃI
î ÃIî ÃIî ÃIî ÃIî ÃIóî ÃJî ÃJ
î ÃJî ÃJî ÃJî  ÃJî! ÃJîî ÃKî	 ÃKî
 ÃKî ÃKíî ÃMî ÃMíî ÃNî ÃNîî ÃOî ÃOî ÃOî ÃOñî ÃPî ÃPî ÃPî ÃPî ÃPî! ÃPîî ÃQî ÃQî ÃQî ÃQîî	 ÃRî ÃRî ÃR
î ÃRóî ÃSî ÃS
î ÃSî ÃSî ÃSî  ÃSî! ÃSóî ÃTî ÃT
î ÃTî ÃTî! ÃTî" ÃTî# ÃTîî ÃUî	 ÃUî
 ÃUî ÃUíî ÃVî ÃVîî ÃXî	 ÃXî
 ÃXî ÃXñî ÃYî ÃYî ÃY	î ÃYî ÃYî  ÃYñî ÃZî ÃZî ÃZ	î ÃZî ÃZî ÃZíî Ã[î Ã[ñî Ã\î Ã\î Ã\	î Ã\î Ã\î Ã\íî Ã]î Ã]íî Ã_î Ã_íî Ã`î Ã`ñî Ãaî Ãaî Ãa	î Ãaî Ãaî Ãañî Ãbî Ãbî Ãb	î Ãbî Ãbî Ãbíî Ãcî Ãcëî Ãeêíî Ãfî Ãf
ñî Ãfî Ãf
î Õ?î Õ?
î Õ?î Õ?ñî Ãfî Ãf
î Õ@î Õ@î Õ@î  Õ@ñî Ãfî Ãf
î ÕAî" ÕAî# ÕAî, ÕAêêíî Ãgî! Ãgíî Ãhî Ãhíî Ãgî! Ãgñî Ãhî Ãhî Ãçî Ãçî Ãçî Ãçíî Ãgî! Ãgñî Ãhî Ãhî Ãéî" Ãéî# Ãéî, Ãé íî Ãgî! Ãg‹ î Ãhî Ãhî Ãèî! Ãèî" Ãèî# Ãèî/ Ãè#î0 Ãè$î6 Ãè*î7 Ãè+î9 Ãè-î: Ãè.îÃF Ãè:îÃG Ãè;îÃJ Ãè>îÃK Ãè?êêíî Ãiî Ãiñî Ãiî Ãiî Ãá	î Ãáî Ãáî Ãáñî Ãiî Ãiî Ãà	î Ãàî Ãàî Ãàûî Ãiî Ãiî Ãâ	î Ãâî Ãâî Ãâî Ãâî  Ãâî" Ãâî$ Ãâî) Ãâ"î+ Ãâ$î- Ãâ&î/ Ãâ(òî Ãiî Ãiî Ãä	î Ãäî Ãäî( Ãä!î) Ãä"î/ Ãä(òî Ãiî Ãiî Ãã	î Ããî Ããî( Ãã!î) Ãã"î/ Ãã(êêíî Ãjî Ãjñî Ãjî Ãjî Ãkî Ãkî Ãkî Ãkñî Ãjî Ãjî Ãlî Ãlî Ãlî Ãlòî Ãjî Ãjî Ãmî Ãmî Ãmî! Ãm î" Ãm!î' Ãm&óî Ãjî Ãjî Ãnî Ãnî Ãnî Ãnî Ãníî Ãoî Ão‹ î Ãpî" Ãpî$ Ãpî, Ãp&î. Ãp(î1 Ãp+î3 Ãp-î8 Ãp2î: Ãp4î? Ãp9îÃ@ Ãp:îÃH ÃpÃBîÃJ ÃpÃDîÃL ÃpÃFîÃO ÃpÃIîÃQ ÃpÃKóî Ãqî Ãqî Ãqî% Ãq%î( Ãq(î) Ãq)î* Ãq*óî Ãrî Ãrî Ãrî# Ãr#î& Ãr&î) Ãr)î* Ãr*óî Ãsî Ãsî Ãsî$ Ãs$î' Ãs'î( Ãs(î) Ãs)óî Ãtî Ãtî Ãtî" Ãt"î% Ãt%î( Ãt(î) Ãt)óî Ãuî Ãuî Ãuî$ Ãu$î' Ãu'î( Ãu(î) Ãu)óî Ãvî Ãvî Ãvî" Ãv"î% Ãv%î( Ãv(î) Ãv)óî Ãwî Ãwî Ãwî& Ãw&î) Ãw)î* Ãw*î+ Ãw+óî Ãxî Ãxî Ãxî$ Ãx$î' Ãx'î* Ãx*î+ Ãx+îî Ãyî Ãyî Ãyî Ãyïî Ãzî Ãzî Ãzî Ãz î  Ãz"ñî Ã{î% Ã{%î& Ã{&î2 Ã{2î4 Ã{4î5 Ã{5ñî Ã|î Ã|î Ã|î Ã|î Ã|î Ã|íî Ã}î Ã}êêîî Ãî Ãî Ãî Ãñî Ãî Ãî ÃÄî ÃÄî ÃÄî ÃÄòî Ãî Ãî ÃÅî ÃÅî ÃÅî& ÃÅ&î' ÃÅ'î+ ÃÅ+òî Ãî Ãî ÃÇî ÃÇî ÃÇî  ÃÇ î! ÃÇ!î& ÃÇ&ñî Ãî Ãî ÃÉî ÃÉî ÃÉî ÃÉòî Ãî Ãî ÃÑî ÃÑî ÃÑî$ ÃÑ$î% ÃÑ%î+ ÃÑ+‹ î Ãî Ãî ÃÖî ÃÖî ÃÖî ÃÖî ÃÖî ÃÖî  ÃÖ î! ÃÖ!î+ ÃÖ+î- ÃÖ-î. ÃÖ.î0 ÃÖ0î4 ÃÖ4î5 ÃÖ5î? ÃÖ?îÃA ÃÖÃAòî Ãî Ãî ÃÖÃCî ÃÖÃJî ÃÖÃKî ÃÖÃOî ÃÖÃPî* ÃÖÃ\êíî Ãî Ãíî Ãiî Ãiíî Ãgî Ãgíî Ãhî Ãhêíî Ãëî Ãëñî Ãëî Ãëî Õ;î Õ;î  Õ;î! Õ;ñî Ãëî Ãëî Õ<î" Õ<î# Õ<î, Õ< òî Ãëî Ãëî Õ=î Õ=î Õ=î( Õ=î) Õ=î/ Õ=#êêíî Ãíî Ãíñî Ãíî Ãíî Õ9	î Õ9î Õ9î Õ9êêíî Ãì
î Ãìíî Ãî
î Ãîíî Ãì
î Ãìñî Ãî
î Ãîî Ã≤î Ã≤î Ã≤î Ã≤íî Ãì
î Ãìñî Ãî
î Ãîî Ã≥î Ã≥î Ã≥î Ã≥íî Ãì
î Ãìñî Ãî
î Ãîî Ã¥î" Ã¥î# Ã¥î, Ã¥$íî Ãì
î Ãìñî Ãî
î Ãîî Ãµî Ãµî  Ãµî" Ãµíî Ãì
î Ãì‹ î Ãî
î Ãîî Ã∂î Ã∂î Ã∂î Ã∂î  Ã∂î" Ã∂î$ Ã∂î& Ã∂î+ Ã∂#î- Ã∂%î/ Ã∂'î1 Ã∂)î4 Ã∂,î6 Ã∂.î8 Ã∂0î: Ã∂2îÃ@ Ã∂8îÃB Ã∂:îÃD Ã∂<îÃF Ã∂>êêê‹ î Ãôî Ãôî Ãôî Ãôî  Ãôî" Ãôî& Ãôî' Ãôî0 Ãô(î2 Ãô*î3 Ãô+î5 Ãô-î9 Ãô1î: Ãô2îÃC Ãô;îÃE Ãô=ñî Ãô?î ÃôÃFî ÃôÃGî# ÃôÃKî$ ÃôÃLî/ ÃôÃWêêêêìî, Ãïî8 Ãïî? Ãïñî Ãñî  Ãñî" Ãñî& Ãñî' Ãñî/ Ãñ%ñî Ãóî! Ãóî# Ãóî' Ãóî( Ãóî1 Ãó'ñî Ãòî# Ãòî% Ãòî) Ãòî* Ãò î5 Ãò+ëî Ãôêêêñî Ãñî$ Ãñî& Ãñî* Ãñî+ Ãñî3 Ãñ%ñî Ãóî% Ãóî' Ãóî+ Ãóî, Ãóî5 Ãó'ñî Ãòî' Ãòî) Ãòî- Ãòî. Ãò î9 Ãò+êêêêêêñî Ãñî  Ãñî" Ãñî& Ãñî' Ãñî/ Ãñ%ñî Ãóî! Ãóî# Ãóî' Ãóî( Ãóî1 Ãó'ñî Ãòî# Ãòî% Ãòî) Ãòî* Ãò î5 Ãò+êêêêêêòî Ãõî Ãõî Ãõî Ãõî Ãõî  Ãõî" Ãõî$ Ãõöî Ãõî Ãõî Ã∞î Ã∞î Ã∞î Ã∞î Ã∞î Ã∞î  Ã∞î" Ã∞êêîî Ãúî Ãúî# Ãúî* Ãúñî Ãúî Ãúî Ãùî Ãùî Ãùî Ãùóî Ãúî Ãúî Ãûî Ãûî Ãûî Ãûî  Ãûòî Ãüî Ãüî Ãüî  Ãü"î! Ãü#î. Ãü0î0 Ãü2î1 Ãü3íî Ã†î Ã†‹ î Ãúî Ãúî Ã°î Ã°î Ã°î" Ã° î# Ã°!î, Ã°*î- Ã°+î. Ã°,î/ Ã°-î9 Ã°7î: Ã°8î> Ã°<î? Ã°=îÃ@ Ã°>îÃA Ã°?îÃK Ã°ÃIîÃL Ã°ÃJîÃS Ã°ÃQêíî Ãúî Ãúêîî Ã£î Ã£î# Ã£î* Ã£ñî Ã£î Ã£î Ã§î Ã§î Ã§î Ã§óî Ã£î Ã£î Ã•î Ã•î Ã•î Ã•î  Ã•òî Ã¶î Ã¶î Ã¶î  Ã¶"î! Ã¶#î+ Ã¶-î- Ã¶/î. Ã¶0íî Ãßî Ãß‹ î Ã£î Ã£î Ã®î Ã®î Ã®î" Ã® î# Ã®!î, Ã®*î- Ã®+î. Ã®,î/ Ã®-î9 Ã®7î: Ã®8îÃA Ã®?îÃB Ã®Ã@îÃC Ã®ÃAîÃD Ã®ÃBîÃN Ã®ÃLîÃO Ã®ÃMîÃS Ã®ÃQêíî Ã£î Ã£êîî Ã™î Ã™î# Ã™î* Ã™ñî Ã™î Ã™î Ã´î Ã´î Ã´î Ã´óî Ã™î Ã™î Ã¨î Ã¨î Ã¨î Ã¨î  Ã¨òî Ã≠î Ã≠î Ã≠î  Ã≠"î! Ã≠#î+ Ã≠-î- Ã≠/î. Ã≠0íî ÃÆî ÃÆêíî Ã™î Ã™íî Ãõî Ãõíî Ãì
î Ãìíî Ãî
î Ãîêíî Ã∏
î! Ã∏íî Ãπ
î Ãπíî Ã∏
î! Ã∏ñî Ãπ
î Ãπî ÃÚî ÃÚî ÃÚî ÃÚíî Ã∏
î! Ã∏ñî Ãπ
î Ãπî ÃÛî ÃÛî ÃÛî ÃÛíî Ã∏
î! Ã∏ñî Ãπ
î Ãπî ÃÙî" ÃÙî# ÃÙî, ÃÙ$íî Ã∏
î! Ã∏ñî Ãπ
î Ãπî Ãıî Ãıî  Ãıî" Ãıíî Ã∏
î! Ã∏ûî Ãπ
î Ãπî Ãˆî Ãˆî Ãˆî Ãˆî  Ãˆî" Ãˆî$ Ãˆî& Ãˆî+ Ãˆ#î- Ãˆ%î/ Ãˆ'î1 Ãˆ)êêîî Ã∫î Ã∫î Ã∫î$ Ã∫ñî Ã∫î Ã∫î Ãªî Ãªî Ãªî Ãªòî Ã∫î Ã∫î Ãºî Ãºî Ãºî& Ãº$î' Ãº%î+ Ãº)öî Ã∫î Ã∫î ÃΩî ÃΩî ÃΩî ÃΩî  ÃΩî" ÃΩ î$ ÃΩ"î& ÃΩ$‹ î Ã∫î Ã∫î Ãæî Ãæî Ãæî Ãæî Ãæî Ãæî  Ãæî! Ãæî* Ãæ(î, Ãæ*î- Ãæ+î/ Ãæ-î3 Ãæ1î4 Ãæ2î= Ãæ;î? Ãæ=òî Ã∫î Ã∫î Ãæ?î ÃæÃFî ÃæÃGî ÃæÃKî ÃæÃLî) ÃæÃWêíî Ã∫î Ã∫êíî Ã¿î Ã¿êêíî Ã¡î Ã¡ñî Ã¡î Ã¡î Ã…î Ã…î  Ã…î! Ã…òî Ã¡î Ã¡î Ã î Ã î Ã î- Ã )î. Ã *î4 Ã 0‹ î Ã¡î Ã¡î ÃÀî ÃÀî ÃÀî ÃÀî ÃÀî ÃÀî" ÃÀî# ÃÀî, ÃÀ(î. ÃÀ*î/ ÃÀ+î1 ÃÀ-î5 ÃÀ1î6 ÃÀ2î? ÃÀ;îÃA ÃÀ=òî Ã¡î Ã¡î ÃÀ?î ÃÀÃFî ÃÀÃGî ÃÀÃKî  ÃÀÃLî+ ÃÀÃWêêîî Ã¬î Ã¬î Ã¬î% Ã¬"ñî Ã¬î Ã¬î Ã√î Ã√î Ã√î Ã√ñî Ã¬î Ã¬î Ãƒî Ãƒî Ãƒî$ Ãƒ&êíî Ã¬î Ã¬êüî Ã≈î Ã≈î Ã≈î Ã≈î Ã≈î  Ã≈î% Ã≈"î& Ã≈#î* Ã≈'î+ Ã≈(î9 Ã≈6î< Ã≈9î> Ã≈;î? Ã≈<îÃE Ã≈ÃBñî Ã≈î Ã≈î Ã∆î Ã∆î Ã∆î Ã∆òî Ã≈î Ã≈î Ã«î Ã«î Ã«î& Ã«(î' Ã«)î+ Ã«-êíî Ã≈î Ã≈íî Ã¡î Ã¡êíî ÃÕî ÃÕñî ÃÕî ÃÕî Ã’î Ã’î  Ã’î! Ã’òî ÃÕî ÃÕî Ã÷î Ã÷î Ã÷î- Ã÷)î. Ã÷*î4 Ã÷0‹ î ÃÕî ÃÕî Ã◊î Ã◊î Ã◊î Ã◊î Ã◊î Ã◊î" Ã◊î# Ã◊î, Ã◊(î. Ã◊*î/ Ã◊+î1 Ã◊-î5 Ã◊1î6 Ã◊2î? Ã◊;îÃA Ã◊=òî ÃÕî ÃÕî Ã◊?î Ã◊ÃFî Ã◊ÃGî Ã◊ÃKî  Ã◊ÃLî+ Ã◊ÃWêêîî ÃŒî ÃŒî ÃŒî ÃŒñî ÃŒî ÃŒî Ãœî Ãœî Ãœî Ãœñî ÃŒî ÃŒî Ã–î Ã–î Ã–î$ Ã–&êíî ÃŒî ÃŒêüî Ã—î Ã—î Ã—î Ã—î Ã—î  Ã—î% Ã—"î& Ã—#î* Ã—'î+ Ã—(î9 Ã—6î< Ã—9î> Ã—;î? Ã—<îÃE Ã—ÃBñî Ã—î Ã—î Ã“î Ã“î Ã“î Ã“òî Ã—î Ã—î Ã”î Ã”î Ã”î& Ã”(î' Ã”)î+ Ã”-êíî Ã—î Ã—íî ÃÕî ÃÕêíî ÃŸî ÃŸñî ÃŸî ÃŸî Ã·î Ã·î  Ã·î! Ã·òî ÃŸî ÃŸî Ã‚î Ã‚î Ã‚î- Ã‚)î. Ã‚*î4 Ã‚0‹ î ÃŸî ÃŸî Ã„î Ã„î Ã„î Ã„î Ã„î Ã„î" Ã„î# Ã„î, Ã„(î. Ã„*î/ Ã„+î1 Ã„-î5 Ã„1î6 Ã„2î? Ã„;îÃA Ã„=òî ÃŸî ÃŸî Ã„?î Ã„ÃFî Ã„ÃGî Ã„ÃKî  Ã„ÃLî+ Ã„ÃWêêîî Ã⁄î Ã⁄î Ã⁄î" Ã⁄ñî Ã⁄î Ã⁄î Ã€î Ã€î Ã€î Ã€ñî Ã⁄î Ã⁄î Ã‹î Ã‹î Ã‹î$ Ã‹&êíî Ã⁄î Ã⁄êôî Ã›î Ã›î Ã›î Ã›î Ã›î* Ã›'î+ Ã›(î3 Ã›0î5 Ã›2ñî Ã›î Ã›î Ãﬁî Ãﬁî Ãﬁî Ãﬁòî Ã›î Ã›î Ãﬂî Ãﬂî Ãﬂî& Ãﬂ(î' Ãﬂ)î+ Ãﬂ-êíî Ã›î Ã›íî ÃŸî ÃŸêíî ÃÂî ÃÂñî ÃÂî ÃÂî ÃÌî ÃÌî  ÃÌî! ÃÌòî ÃÂî ÃÂî ÃÓî ÃÓî ÃÓî- ÃÓ)î. ÃÓ*î4 ÃÓ0‹ î ÃÂî ÃÂî ÃÔî ÃÔî ÃÔî ÃÔî ÃÔî ÃÔî" ÃÔî# ÃÔî, ÃÔ(î. ÃÔ*î/ ÃÔ+î1 ÃÔ-î5 ÃÔ1î6 ÃÔ2î? ÃÔ;îÃA ÃÔ=òî ÃÂî ÃÂî ÃÔ?î ÃÔÃFî ÃÔÃGî ÃÔÃKî  ÃÔÃLî+ ÃÔÃWêêîî ÃÊî ÃÊî ÃÊî  ÃÊñî ÃÊî ÃÊî ÃÁî ÃÁî ÃÁî ÃÁñî ÃÊî ÃÊî ÃËî ÃËî ÃËî$ ÃË&êíî ÃÊî ÃÊêòî ÃÈî ÃÈî ÃÈî ÃÈî ÃÈî  ÃÈî- ÃÈ*î4 ÃÈ1ñî ÃÈî ÃÈî ÃÍî ÃÍî ÃÍî ÃÍòî ÃÈî ÃÈî ÃÎî ÃÎî ÃÎî& ÃÎ(î' ÃÎ)î+ ÃÎ-êíî ÃÈî ÃÈíî ÃÂî ÃÂíî Ã¿î Ã¿íî Ã∏
î Ã∏íî Ãπ
î Ãπêíî Ã¯
î Ã¯òî Ã˘
î Ã˘î Ã˘î Ã˘î Ã˘î  Ã˘î" Ã˘î$ Ã˘íî Ã¯
î Ã¯ñî Ã˘
î Ã˘î Õ6î Õ6î Õ6î Õ6íî Ã¯
î Ã¯‹ î Ã˘
î Ã˘î Õ7î Õ7î Õ7î Õ7î Õ7î  Õ7î" Õ7î$ Õ7î) Õ7$î+ Õ7&î- Õ7(î/ Õ7*î2 Õ7-î4 Õ7/î6 Õ71î8 Õ73î> Õ79îÃ@ Õ7;îÃB Õ7=îÃD Õ7?êêîî Ã˙î Ã˙î# Ã˙î* Ã˙ñî Ã˙î Ã˙î Ã˚î Ã˚î  Ã˚î! Ã˚óî Ã˙î Ã˙î Ã¸î Ã¸î Ã¸î Ã¸î  Ã¸íî Ã˝î Ã˝‹ î Ã˛î" Ã˛î$ Ã˛î, Ã˛&î. Ã˛(î1 Ã˛+î3 Ã˛-î8 Ã˛2î: Ã˛4î? Ã˛9îÃ@ Ã˛:îÃH Ã˛ÃBîÃJ Ã˛ÃDîÃL Ã˛ÃFîÃO Ã˛ÃIîÃQ Ã˛ÃKóî Ãˇî Ãˇî Ãˇî% Ãˇ%î( Ãˇ(î) Ãˇ)î* Ãˇ*óî Õ î Õ î Õ î# Õ #î& Õ &î) Õ )î* Õ *óî Õî Õî Õî$ Õ$î' Õ'î( Õ(î) Õ)óî Õî Õî Õî" Õ"î% Õ%î( Õ(î) Õ)óî Õî Õî Õî$ Õ$î' Õ'î( Õ(î) Õ)óî Õî Õî Õî" Õ"î% Õ%î( Õ(î) Õ)óî Õî Õî Õî& Õ&î) Õ)î* Õ*î+ Õ+óî Õî Õî Õî$ Õ$î' Õ'î* Õ*î+ Õ+îî Õî Õî Õî Õïî Õî Õî Õî Õ î  Õ"òî Õ	î% Õ	%î& Õ	&î0 Õ	0î1 Õ	1î> Õ	>î? Õ	?îÃ@ Õ	Ã@ñî Õ
î Õ
î Õ
î Õ
î Õ
î Õ
íî Õî Õ‹ î Ã˙î Ã˙î Õî Õî Õî Õî Õî Õî" Õî# Õî. Õ*î0 Õ,î1 Õ-î3 Õ/î7 Õ3î8 Õ4îÃC Õ?îÃE ÕÃAòî Ã˙î Ã˙î ÕÃCî ÕÃJî ÕÃKî ÕÃOî  ÕÃPî- ÕÃ]êíî Ã˙î Ã˙êîî Õî Õî# Õî- Õñî Õî Õî Õî Õî  Õî! Õóî Õî Õî Õî Õî Õî Õî  Õíî Õî Õ‹ î Õî" Õî$ Õî, Õ&î. Õ(î1 Õ+î3 Õ-î8 Õ2î: Õ4î? Õ9îÃ@ Õ:îÃH ÕÃBîÃJ ÕÃDîÃL ÕÃFîÃO ÕÃIîÃQ ÕÃKóî Õî Õî Õî% Õ%î( Õ(î) Õ)î* Õ*óî Õî Õî Õî# Õ#î& Õ&î) Õ)î* Õ*óî Õî Õî Õî$ Õ$î' Õ'î( Õ(î) Õ)óî Õî Õî Õî" Õ"î% Õ%î( Õ(î) Õ)óî Õî Õî Õî$ Õ$î' Õ'î( Õ(î) Õ)óî Õî Õî Õî" Õ"î% Õ%î( Õ(î) Õ)óî Õî Õî Õî& Õ&î) Õ)î* Õ*î+ Õ+óî Õî Õî Õî$ Õ$î' Õ'î* Õ*î+ Õ+îî Õî Õî Õî Õïî Õî Õî Õî Õ î  Õ"òî Õî% Õ%î& Õ&î0 Õ0î1 Õ1îÃA ÕÃAîÃB ÕÃBîÃC ÕÃCñî Õî Õî Õî Õî Õî Õíî Õî Õ‹ î Õî Õî Õ î Õ î Õ î Õ î Õ î Õ î" Õ î# Õ î. Õ *î0 Õ ,î1 Õ -î3 Õ /î7 Õ 3î8 Õ 4îÃC Õ ?îÃE Õ ÃAòî Õî Õî Õ ÃCî Õ ÃJî Õ ÃKî Õ ÃOî  Õ ÃPî- Õ Ã]êíî Õî Õêîî Õ"î Õ"î# Õ"î- Õ"ñî Õ"î Õ"î Õ#î Õ#î  Õ#î! Õ#óî Õ"î Õ"î Õ$î Õ$î Õ$î Õ$î  Õ$íî Õ%î Õ%‹ î Õ&î" Õ&î$ Õ&î, Õ&&î. Õ&(î1 Õ&+î3 Õ&-î8 Õ&2î: Õ&4î? Õ&9îÃ@ Õ&:îÃH Õ&ÃBîÃJ Õ&ÃDîÃL Õ&ÃFîÃO Õ&ÃIîÃQ Õ&ÃKóî Õ'î Õ'î Õ'î% Õ'%î( Õ'(î) Õ')î* Õ'*óî Õ(î Õ(î Õ(î# Õ(#î& Õ(&î) Õ()î* Õ(*óî Õ)î Õ)î Õ)î$ Õ)$î' Õ)'î( Õ)(î) Õ))óî Õ*î Õ*î Õ*î" Õ*"î% Õ*%î( Õ*(î) Õ*)óî Õ+î Õ+î Õ+î$ Õ+$î' Õ+'î( Õ+(î) Õ+)óî Õ,î Õ,î Õ,î" Õ,"î% Õ,%î( Õ,(î) Õ,)óî Õ-î Õ-î Õ-î& Õ-&î) Õ-)î* Õ-*î+ Õ-+óî Õ.î Õ.î Õ.î$ Õ.$î' Õ.'î* Õ.*î+ Õ.+îî Õ/î Õ/î Õ/î Õ/ïî Õ0î Õ0î Õ0î Õ0 î  Õ0"òî Õ1î% Õ1%î& Õ1&î0 Õ10î1 Õ11îÃA Õ1ÃAîÃB Õ1ÃBîÃC Õ1ÃCñî Õ2î Õ2î Õ2î Õ2î Õ2î Õ2íî Õ3î Õ3‹ î Õ"î Õ"î Õ4î Õ4î Õ4î Õ4î Õ4î Õ4î" Õ4î# Õ4î. Õ4*î0 Õ4,î1 Õ4-î3 Õ4/î7 Õ43î8 Õ44îÃC Õ4?îÃE Õ4ÃAòî Õ"î Õ"î Õ4ÃCî Õ4ÃJî Õ4ÃKî Õ4ÃOî  Õ4ÃPî- Õ4Ã]êíî Õ"î Õ"íî Ã¯
î Ã¯íî Ã˘
î Ã˘íî Ãíî Ãííî Ãëî Ãëíî Ãfî Ãf
ëî ÕBíî ÕDî ÕDíî ÕE
î ÕE‹ î ÕFî ÕF
î ÕFî ÕFî ÕFî ÕFî ÕFî ÕFî! ÕFî$ ÕF î& ÕF"î) ÕF%î+ ÕF'î. ÕF*î0 ÕF,î3 ÕF/î4 ÕF0î5 ÕF1úî ÕGî ÕG
î ÕGî ÕGî ÕGî ÕGî ÕGî" ÕGî$ ÕG î' ÕG#î( ÕG$î) ÕG%ñî ÕHî ÕHî ÕHî ÕHî ÕHî ÕHûî ÕIî ÕI	î ÕIî ÕIî ÕIî ÕIî ÕIî ÕIî ÕIî ÕIî  ÕIî! ÕIî# ÕIî% ÕI!‹ î ÕJî ÕJî ÕJî ÕJî ÕJî" ÕJî# ÕJî( ÕJ"î) ÕJ#î- ÕJ'î. ÕJ(î4 ÕJ.î6 ÕJ0î9 ÕJ3î> ÕJ8î? ÕJ9îÃE ÕJ?îÃF ÕJÃ@îÃG ÕJÃA‹ î ÕKî ÕKî ÕKî ÕK î ÕK!î$ ÕK&î% ÕK'î) ÕK+î* ÕK,î0 ÕK2î2 ÕK4î5 ÕK7î> ÕKÃ@î? ÕKÃAîÃE ÕKÃGîÃF ÕKÃHîÃG ÕKÃIîÃJ ÕKÃLîÃM ÕKÃOîÃN ÕKÃPëî	 ÕLóî ÕMî ÕMî ÕMî ÕMî ÕMî ÕMî ÕMíî ÕNî ÕNíî ÕPî ÕPíî ÕQ
î ÕQîî ÕRî ÕRî ÕRî ÕRíî ÕSî ÕSíî ÕUî ÕU
íî ÕV
î ÕVóî ÕWî ÕWî ÕW	î ÕWî ÕWî ÕWî ÕWóî ÕXî ÕXî ÕX	î ÕXî ÕXî ÕXî ÕXóî ÕYî ÕYî ÕY	î ÕYî ÕYî ÕYî ÕYóî ÕZî ÕZî ÕZ	î ÕZî ÕZî ÕZî ÕZóî Õ[î Õ[î Õ[	î Õ[î Õ[î Õ[î Õ[óî Õ\î Õ\î Õ\	î Õ\î Õ\î Õ\î Õ\óî Õ]î Õ]î Õ]	î Õ]î Õ]î Õ]î Õ]óî Õ^î Õ^î Õ^	î Õ^î Õ^î Õ^î Õ^óî Õ_î Õ_î Õ_	î Õ_î Õ_î Õ_î Õ_óî Õ`î Õ`î Õ`	î Õ`î Õ`î Õ`î Õ`óî Õaî Õaî Õa	î Õaî Õaî Õaî Õaóî Õbî Õbî Õb	î Õbî Õbî Õbî Õbíî Õcî Õcíî Õeî Õeîî Õf
î Õfî Õfî Õf0íî Õgî Õgîî Õhî Õhî Õhî Õhñî Õiî Õiî Õiî Õiî Õiî! Õiîî Õjî Õjî Õjî Õjîî	 Õkî Õkî Õk
î Õkíî Õlî Õlóî Õmî Õm
î Õmî Õmî  Õmî! Õmî" Õmóî Õnî Õn
î Õnî Õnî Õnî! Õnî" Õnóî Õoî Õo
î Õoî Õoî! Õoî" Õoî# Õoóî Õpî Õp
î Õpî Õpî Õpî" Õpî# Õpóî Õqî Õq
î Õqî Õqî Õqî  Õqî! Õqóî Õrî Õr
î Õrî Õrî Õrî  Õrî! Õróî Õsî Õs
î Õsî Õsî Õsî  Õsî! Õsóî Õtî Õt
î Õtî Õtî Õtî  Õtî! Õtóî Õuî Õu
î Õuî Õuî  Õuî! Õuî" Õuóî Õvî Õv
î Õvî Õvî Õvî! Õvî" Õvíî Õwî Õwóî Õxî Õx
î Õxî Õxî Õxî Õxî  Õxóî Õyî Õy
î Õyî Õyî Õyî Õyî Õyîî Õzî	 Õzî
 Õzî Õzíî Õ{î Õ{‘rFñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹¡ëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ëî  Ãπ ëî  Ã∫ ëî  Ãª ëî  Ãº ëî  ÃΩ ëî  Ãæ ëî  Ãø ëî  Ã¿ ëî  Ã¡ ëî  Ã¬ ëî  Ã√ ëî  Ãƒ ëî  Ã≈ ëî  Ã∆ ëî  Ã« ëî  Ã» ëî  Ã… ëî  Ã  ëî  ÃÀ ëî  ÃÃ ëî  ÃÕ ëî  ÃŒ ëî  Ãœ ëî  Ã– ëî  Ã— ëî  Ã“ ëî  Ã” ëî  Ã‘ ëî  Ã’ ëî  Ã÷ ëî  Ã◊ ëî  Ãÿ ëî  ÃŸ ëî  Ã⁄ ëî  Ã€ ëî  Ã‹ ëî  Ã› ëî  Ãﬁ ëî  Ãﬂ ëî  Ã‡ ëî  Ã· ëî  Ã‚ ëî  Ã„ ëî  Ã‰ ëî  ÃÂ ëî  ÃÊ ëî  ÃÁ ëî  ÃË ëî  ÃÈ ëî  ÃÍ ëî  ÃÎ ëî  ÃÏ ëî  ÃÌ ëî  ÃÓ ëî  ÃÔ ëî  Ã ëî  ÃÒ ëî  ÃÚ ëî  ÃÛ ëî  ÃÙ ëî  Ãı ëî  Ãˆ ëî  Ã˜ ëî  Ã¯ ëî  Ã˘ ëî  Ã˙ ëî  Ã˚ ëî  Ã¸ ëî  Ã˝ ëî  Ã˛ ëî  Ãˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ‘rGíßmissing¶plugin√¶genAbc¬ê‘  ‘rHî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêêì‘rIï§type•start£end™specifiers¶source±ImportDeclarationÃÄÃ∆ë‘rJî§type•start£end•local∂ImportDefaultSpecifierÃáÃú‘rKî§type•start£end§name™IdentifierÃáÃúµTimeManagementService‘rLï§type•start£end•value£rawßLiteralÃ¢Ã≈Ÿ!../services/TimeManagementServiceŸ#'../services/TimeManagementService'I±ImportDeclarationÃ»Õë‘rMï§type•start£end®imported•localØImportSpecifierÃ—Ã›K™IdentifierÃ—Ã›¨TimerDisplayK™IdentifierÃ—Ã›¨TimerDisplayLßLiteralÃÂÕ∫../components/TimerDisplayº'../components/TimerDisplay'I±ImportDeclarationÕÕCëMØImportSpecifierÕÕK™IdentifierÕÕ±navigationManagerK™IdentifierÕÕ±navigationManagerLßLiteralÕ&ÕB∫../utils/NavigationManagerº'../utils/NavigationManager'