‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄úyif (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
import { NavigationManager } from '../utils/NavigationManager';
class Index extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__cubeState = new ObservedPropertySimplePU('Êú™ÂºÄÂßã', this, "cubeState");
        this.__scramble = new ObservedPropertySimplePU('', this, "scramble");
        this.__solveTime = new ObservedPropertySimplePU(0, this, "solveTime");
        this.__isTiming = new ObservedPropertySimplePU(false, this, "isTiming");
        this.__startTime = new ObservedPropertySimplePU(0, this, "startTime");
        this.__showScramble = new ObservedPropertySimplePU(false, this, "showScramble");
        this.__bestTime = new ObservedPropertySimplePU(0
        // ÂºπÊÄßÂä®ÁîªÁä∂ÊÄÅÂèòÈáè
        , this, "bestTime");
        this.__titleScale = new ObservedPropertySimplePU(0.8, this, "titleScale");
        this.__titleOpacity = new ObservedPropertySimplePU(0, this, "titleOpacity");
        this.__cardScale = new ObservedPropertySimplePU(0.9, this, "cardScale");
        this.__cardOpacity = new ObservedPropertySimplePU(0, this, "cardOpacity");
        this.__timerScale = new ObservedPropertySimplePU(0.7, this, "timerScale");
        this.__timerOpacity = new ObservedPropertySimplePU(0, this, "timerOpacity");
        this.__buttonScale = new ObservedPropertySimplePU(0.8, this, "buttonScale");
        this.__buttonOpacity = new ObservedPropertySimplePU(0, this, "buttonOpacity");
        this.__navScale = new ObservedPropertySimplePU(0.9, this, "navScale");
        this.__navOpacity = new ObservedPropertySimplePU(0, this, "navOpacity");
        this.__iconOpacity = new ObservedPropertySimplePU(0, this, "iconOpacity");
        this.__iconScale = new ObservedPropertySimplePU(0, this, "iconScale");
        this.__itemScale = new ObservedPropertySimplePU(1, this, "itemScale");
        this.__itemOpacity = new ObservedPropertySimplePU(1, this, "itemOpacity");
        this.__selectedTab = new ObservedPropertySimplePU(0, this, "selectedTab");
        this.timer = 0;
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params) {
        if (params.cubeState !== undefined) {
            this.cubeState = params.cubeState;
        }
        if (params.scramble !== undefined) {
            this.scramble = params.scramble;
        }
        if (params.solveTime !== undefined) {
            this.solveTime = params.solveTime;
        }
        if (params.isTiming !== undefined) {
            this.isTiming = params.isTiming;
        }
        if (params.startTime !== undefined) {
            this.startTime = params.startTime;
        }
        if (params.showScramble !== undefined) {
            this.showScramble = params.showScramble;
        }
        if (params.bestTime !== undefined) {
            this.bestTime = params.bestTime;
        }
        if (params.titleScale !== undefined) {
            this.titleScale = params.titleScale;
        }
        if (params.titleOpacity !== undefined) {
            this.titleOpacity = params.titleOpacity;
        }
        if (params.cardScale !== undefined) {
            this.cardScale = params.cardScale;
        }
        if (params.cardOpacity !== undefined) {
            this.cardOpacity = params.cardOpacity;
        }
        if (params.timerScale !== undefined) {
            this.timerScale = params.timerScale;
        }
        if (params.timerOpacity !== undefined) {
            this.timerOpacity = params.timerOpacity;
        }
        if (params.buttonScale !== undefined) {
            this.buttonScale = params.buttonScale;
        }
        if (params.buttonOpacity !== undefined) {
            this.buttonOpacity = params.buttonOpacity;
        }
        if (params.navScale !== undefined) {
            this.navScale = params.navScale;
        }
        if (params.navOpacity !== undefined) {
            this.navOpacity = params.navOpacity;
        }
        if (params.iconOpacity !== undefined) {
            this.iconOpacity = params.iconOpacity;
        }
        if (params.iconScale !== undefined) {
            this.iconScale = params.iconScale;
        }
        if (params.itemScale !== undefined) {
            this.itemScale = params.itemScale;
        }
        if (params.itemOpacity !== undefined) {
            this.itemOpacity = params.itemOpacity;
        }
        if (params.selectedTab !== undefined) {
            this.selectedTab = params.selectedTab;
        }
        if (params.timer !== undefined) {
            this.timer = params.timer;
        }
    }
    updateStateVars(params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__cubeState.purgeDependencyOnElmtId(rmElmtId);
        this.__scramble.purgeDependencyOnElmtId(rmElmtId);
        this.__solveTime.purgeDependencyOnElmtId(rmElmtId);
        this.__isTiming.purgeDependencyOnElmtId(rmElmtId);
        this.__startTime.purgeDependencyOnElmtId(rmElmtId);
        this.__showScramble.purgeDependencyOnElmtId(rmElmtId);
        this.__bestTime.purgeDependencyOnElmtId(rmElmtId);
        this.__titleScale.purgeDependencyOnElmtId(rmElmtId);
        this.__titleOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__cardScale.purgeDependencyOnElmtId(rmElmtId);
        this.__cardOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__timerScale.purgeDependencyOnElmtId(rmElmtId);
        this.__timerOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__buttonScale.purgeDependencyOnElmtId(rmElmtId);
        this.__buttonOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__navScale.purgeDependencyOnElmtId(rmElmtId);
        this.__navOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__iconOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__iconScale.purgeDependencyOnElmtId(rmElmtId);
        this.__itemScale.purgeDependencyOnElmtId(rmElmtId);
        this.__itemOpacity.purgeDependencyOnElmtId(rmElmtId);
        this.__selectedTab.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__cubeState.aboutToBeDeleted();
        this.__scramble.aboutToBeDeleted();
        this.__solveTime.aboutToBeDeleted();
        this.__isTiming.aboutToBeDeleted();
        this.__startTime.aboutToBeDeleted();
        this.__showScramble.aboutToBeDeleted();
        this.__bestTime.aboutToBeDeleted();
        this.__titleScale.aboutToBeDeleted();
        this.__titleOpacity.aboutToBeDeleted();
        this.__cardScale.aboutToBeDeleted();
        this.__cardOpacity.aboutToBeDeleted();
        this.__timerScale.aboutToBeDeleted();
        this.__timerOpacity.aboutToBeDeleted();
        this.__buttonScale.aboutToBeDeleted();
        this.__buttonOpacity.aboutToBeDeleted();
        this.__navScale.aboutToBeDeleted();
        this.__navOpacity.aboutToBeDeleted();
        this.__iconOpacity.aboutToBeDeleted();
        this.__iconScale.aboutToBeDeleted();
        this.__itemScale.aboutToBeDeleted();
        this.__itemOpacity.aboutToBeDeleted();
        this.__selectedTab.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    get cubeState() {
        return this.__cubeState.get();
    }
    set cubeState(newValue) {
        this.__cubeState.set(newValue);
    }
    get scramble() {
        return this.__scramble.get();
    }
    set scramble(newValue) {
        this.__scramble.set(newValue);
    }
    get solveTime() {
        return this.__solveTime.get();
    }
    set solveTime(newValue) {
        this.__solveTime.set(newValue);
    }
    get isTiming() {
        return this.__isTiming.get();
    }
    set isTiming(newValue) {
        this.__isTiming.set(newValue);
    }
    get startTime() {
        return this.__startTime.get();
    }
    set startTime(newValue) {
        this.__startTime.set(newValue);
    }
    get showScramble() {
        return this.__showScramble.get();
    }
    set showScramble(newValue) {
        this.__showScramble.set(newValue);
    }
    get bestTime() {
        return this.__bestTime.get();
    }
    set bestTime(newValue) {
        this.__bestTime.set(newValue);
    }
    get titleScale() {
        return this.__titleScale.get();
    }
    set titleScale(newValue) {
        this.__titleScale.set(newValue);
    }
    get titleOpacity() {
        return this.__titleOpacity.get();
    }
    set titleOpacity(newValue) {
        this.__titleOpacity.set(newValue);
    }
    get cardScale() {
        return this.__cardScale.get();
    }
    set cardScale(newValue) {
        this.__cardScale.set(newValue);
    }
    get cardOpacity() {
        return this.__cardOpacity.get();
    }
    set cardOpacity(newValue) {
        this.__cardOpacity.set(newValue);
    }
    get timerScale() {
        return this.__timerScale.get();
    }
    set timerScale(newValue) {
        this.__timerScale.set(newValue);
    }
    get timerOpacity() {
        return this.__timerOpacity.get();
    }
    set timerOpacity(newValue) {
        this.__timerOpacity.set(newValue);
    }
    get buttonScale() {
        return this.__buttonScale.get();
    }
    set buttonScale(newValue) {
        this.__buttonScale.set(newValue);
    }
    get buttonOpacity() {
        return this.__buttonOpacity.get();
    }
    set buttonOpacity(newValue) {
        this.__buttonOpacity.set(newValue);
    }
    get navScale() {
        return this.__navScale.get();
    }
    set navScale(newValue) {
        this.__navScale.set(newValue);
    }
    get navOpacity() {
        return this.__navOpacity.get();
    }
    set navOpacity(newValue) {
        this.__navOpacity.set(newValue);
    }
    get iconOpacity() {
        return this.__iconOpacity.get();
    }
    set iconOpacity(newValue) {
        this.__iconOpacity.set(newValue);
    }
    get iconScale() {
        return this.__iconScale.get();
    }
    set iconScale(newValue) {
        this.__iconScale.set(newValue);
    }
    get itemScale() {
        return this.__itemScale.get();
    }
    set itemScale(newValue) {
        this.__itemScale.set(newValue);
    }
    get itemOpacity() {
        return this.__itemOpacity.get();
    }
    set itemOpacity(newValue) {
        this.__itemOpacity.set(newValue);
    }
    get selectedTab() {
        return this.__selectedTab.get();
    }
    set selectedTab(newValue) {
        this.__selectedTab.set(newValue);
    }
    aboutToAppear() {
        this.generateScramble();
        this.loadBestTime();
        // È¶ñÊ¨°ËøõÂÖ•Êó∂Áõ¥Êé•ÊâßË°åÂä®ÁîªÔºå‰∏çÈáçÁΩÆÁä∂ÊÄÅ
        this.animateIn();
    }
    onPageShow() {
        // È°µÈù¢ÈáçÊñ∞ÊòæÁ§∫Êó∂ÈáçÁΩÆÂèØËßÅÊÄßÂíåÂä®Áîª
        this.resetVisibility();
        this.animateIn();
    }
    // È°µÈù¢Âä†ËΩΩÂä®Áîª - ÂçèË∞ÉÂä®ÁîªÈÄüÂ∫¶
    animateIn() {
        // Âø´ÈÄü‰ΩÜÊúâÂ±ÇÊ¨°ÁöÑÂä®ÁîªÔºåÊÄªÊó∂Èïø400ms
        // Ê†áÈ¢ò - Á´ãÂç≥Âá∫Áé∞Ôºà200msÔºâ
        Context.animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
            this.titleOpacity = 1;
            this.titleScale = 1;
        });
        // ‰∏ªË¶ÅÂÜÖÂÆπ - ËΩªÂæÆÂª∂ËøüÔºà250msÔºâ
        setTimeout(() => {
            Context.animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
                this.cardOpacity = 1;
                this.cardScale = 1;
                this.timerOpacity = 1;
                this.timerScale = 1;
            });
        }, 100);
        // Êìç‰ΩúÊåâÈíÆ - ÊúÄÂêéÂá∫Áé∞Ôºà200msÔºâ
        setTimeout(() => {
            Context.animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
                this.buttonOpacity = 1;
                this.buttonScale = 1;
                this.navOpacity = 1;
                this.navScale = 1;
                this.iconOpacity = 1;
                this.iconScale = 1;
            });
        }, 200);
        // Â∫ïÈÉ®ÂõæÊ†á
    }
    //need to be corrected
    generateScramble() {
        const moves = ["R", "U", "F", "L", "D", "B"];
        const modifiers = ["", "'", "2"];
        let scramble = "";
        let lastMove = "";
        for (let i = 0; i < 20; i++) {
            let move = moves[Math.floor(Math.random() * moves.length)];
            while (move === lastMove) {
                move = moves[Math.floor(Math.random() * moves.length)];
            }
            lastMove = move;
            const modifier = modifiers[Math.floor(Math.random() * modifiers.length)];
            scramble += move + modifier + " ";
        }
        this.scramble = scramble.trim();
    }
    loadBestTime() {
        this.bestTime = 0;
    }
    startTimer() {
        if (!this.isTiming) {
            this.isTiming = true;
            this.startTime = Date.now();
            this.timer = setInterval(() => {
                this.solveTime = Date.now() - this.startTime;
            }, 10);
        }
    }
    stopTimer() {
        if (this.isTiming) {
            this.isTiming = false;
            clearInterval(this.timer);
            if (this.solveTime < this.bestTime || this.bestTime === 0) {
                this.bestTime = this.solveTime;
            }
        }
    }
    resetTimer() {
        this.solveTime = 0;
        this.isTiming = false;
        clearInterval(this.timer);
        this.generateScramble();
    }
    formatTime(ms) {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        const milliseconds = Math.floor((ms % 1000) / 10);
        if (minutes > 0) {
            return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(2, '0')}`;
        }
        else {
            return `${seconds}.${milliseconds.toString().padStart(2, '0')}`;
        }
    }
    // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàóÁöÑÈ°µÈù¢ÂàáÊç¢
    navigateTo(page) {
        this.animateTransition(() => {
            NavigationManager.getInstance().navigateTo(page);
        });
    }
    // È°µÈù¢ÂàáÊç¢Âä®Áîª - Â∫ïÈÉ®ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®
    animateTransition(callback) {
        Context.animateToImmediately({
            duration: 300,
            curve: Curve.Friction,
            onFinish: callback
        }, () => {
            // ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®ÔºåÂè™ÈöêËóèÂÖ∂‰ªñÂÖÉÁ¥†
            this.titleOpacity = 0;
            this.titleScale = 0.3;
            this.cardOpacity = 0;
            this.cardScale = 0.3;
            this.timerOpacity = 0;
            this.timerScale = 0.3;
            this.buttonOpacity = 0;
            this.buttonScale = 0.3;
            // ÂØºËà™Êù°‰øùÊåÅÂèØËßÅÂíåÂéüÂßãÂ§ßÂ∞è
            this.navOpacity = 1;
            this.navScale = 1;
            this.iconOpacity = 0;
            this.iconScale = 0.3;
        });
    }
    // ÈáçÁΩÆÈ°µÈù¢ÂèØËßÅÊÄßÔºàËß£ÂÜ≥ËøîÂõûÁ©∫ÁôΩÈóÆÈ¢òÔºâ
    resetVisibility() {
        // Âº∫Âà∂ÈáçÁΩÆÊâÄÊúâÂä®ÁîªÁä∂ÊÄÅ‰∏∫ÂèØËßÅÔºåÂØºËà™Êù°ÂßãÁªà‰øùÊåÅÂèØËßÅ
        this.titleScale = 1;
        this.titleOpacity = 1;
        this.cardScale = 1;
        this.cardOpacity = 1;
        this.itemScale = 1;
        this.itemOpacity = 1;
        this.buttonScale = 1;
        this.buttonOpacity = 1;
        this.timerScale = 1;
        this.timerOpacity = 1;
        this.navScale = 1;
        this.navOpacity = 1;
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Column.width('100%');
            Column.height('100%');
            Column.backgroundColor('#F2F2F7');
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
            Column.create();
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
            Column.width('100%');
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
            Column.backgroundColor('#6366F1');
            // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
            Column.expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP]);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.width('100%');
            Row.height(38);
            Row.justifyContent(FlexAlign.Center);
            Row.alignItems(VerticalAlign.Top);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('  CubeTime');
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            Text.width('25%');
            Text.fontSize(32);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor('#FFFFFF');
            Text.layoutWeight(1);
            Text.textAlign(TextAlign.Start);
            Text.scale({ x: this.titleScale, y: this.titleScale });
            Text.opacity(this.titleOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        Row.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Row.create();
            Row.justifyContent(FlexAlign.Center);
            Row.alignItems(VerticalAlign.Top);
            Row.height(17);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('      ‰∏Ä‰∏™Êô∫ËÉΩÊó∂Èó¥ÁÆ°ÁêÜapp');
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            Text.width('20%');
            Text.fontSize(10);
            Text.fontWeight(FontWeight.Normal);
            Text.fontColor('#FFFFFF');
            Text.layoutWeight(1);
            Text.textAlign(TextAlign.Start);
            Text.scale({ x: this.titleScale, y: this.titleScale });
            Text.opacity(0.6);
            Context.animation(null);
        }, Text);
        Text.pop();
        Row.pop();
        // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            //‰∏ª‰ΩìÈÉ®ÂàÜ
            Scroll.create();
            //‰∏ª‰ΩìÈÉ®ÂàÜ
            Scroll.layoutWeight(1);
        }, Scroll);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.width('90%');
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.padding(16);
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.backgroundColor('#FFFFFF');
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.borderRadius(12);
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.margin({ left: 16, right: 16, top: 16 });
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.scale({ x: this.cardScale, y: this.cardScale });
            // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
            Column.opacity(this.cardOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('È≠îÊñπÁä∂ÊÄÅ');
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            Text.fontSize(18);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor('#1F2937');
            Text.margin({ bottom: 8 });
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.cubeState);
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            Text.fontSize(16);
            Text.fontColor('#6B7280');
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Êâì‰π±ÊòæÁ§∫
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 100
            });
            // Êâì‰π±ÊòæÁ§∫
            Column.width('100%');
            // Êâì‰π±ÊòæÁ§∫
            Column.padding(16);
            // Êâì‰π±ÊòæÁ§∫
            Column.margin({ left: 16, right: 16 });
            // Êâì‰π±ÊòæÁ§∫
            Column.scale({ x: this.cardScale, y: this.cardScale });
            // Êâì‰π±ÊòæÁ§∫
            Column.opacity(this.cardOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Êâì‰π±');
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 100
            });
            Text.fontSize(18);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor('#1F2937');
            Text.margin({ bottom: 8 });
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.scramble);
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 100
            });
            Text.fontSize(16);
            Text.fontColor('#374151');
            Text.textAlign(TextAlign.Center);
            Text.width('100%');
            Text.padding(12);
            Text.backgroundColor('#FFFFFF');
            Text.borderRadius(8);
            Text.border({ width: 1, color: '#E5E7EB' });
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        // Êâì‰π±ÊòæÁ§∫
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // ËÆ°Êó∂Âô®ÊòæÁ§∫
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 200
            });
            // ËÆ°Êó∂Âô®ÊòæÁ§∫
            Column.width('100%');
            // ËÆ°Êó∂Âô®ÊòæÁ§∫
            Column.padding(16);
            // ËÆ°Êó∂Âô®ÊòæÁ§∫
            Column.scale({ x: this.timerScale, y: this.timerScale });
            // ËÆ°Êó∂Âô®ÊòæÁ§∫
            Column.opacity(this.timerOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.formatTime(this.solveTime));
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 200
            });
            Text.fontSize(48);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor('#1F2937');
            Text.textAlign(TextAlign.Center);
            Text.width('100%');
            Text.padding(32);
            Text.backgroundColor('#FFFFFF');
            Text.borderRadius(16);
            Text.border({ width: 2, color: '#6366F1' });
            Text.scale({ x: this.timerScale, y: this.timerScale });
            Text.opacity(this.timerOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        // ËÆ°Êó∂Âô®ÊòæÁ§∫
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 300
            });
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.width('100%');
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.padding(16);
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.backgroundColor('#F0FDF4');
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.borderRadius(12);
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.margin({ left: 16, right: 16 });
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.scale({ x: this.cardScale, y: this.cardScale });
            // ÊúÄ‰Ω≥Êó∂Èó¥
            Column.opacity(this.cardOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('ÊúÄ‰Ω≥Êó∂Èó¥');
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 300
            });
            Text.fontSize(16);
            Text.fontColor('#6B7280');
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create(this.formatTime(this.bestTime));
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 300
            });
            Text.fontSize(24);
            Text.fontWeight(FontWeight.Bold);
            Text.fontColor('#059669');
            Text.scale({ x: this.cardScale, y: this.cardScale });
            Text.opacity(this.cardOpacity);
            Context.animation(null);
        }, Text);
        Text.pop();
        // ÊúÄ‰Ω≥Êó∂Èó¥
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // ÊéßÂà∂ÊåâÈíÆ
            Row.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 400
            });
            // ÊéßÂà∂ÊåâÈíÆ
            Row.width('100%');
            // ÊéßÂà∂ÊåâÈíÆ
            Row.justifyContent(FlexAlign.SpaceEvenly);
            // ÊéßÂà∂ÊåâÈíÆ
            Row.padding(16);
            // ÊéßÂà∂ÊåâÈíÆ
            Row.scale({ x: this.buttonScale, y: this.buttonScale });
            // ÊéßÂà∂ÊåâÈíÆ
            Row.opacity(this.buttonOpacity);
            Context.animation(null);
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Button.createWithLabel('ÈáçÁΩÆ');
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 400
            });
            Button.width(100);
            Button.height(40);
            Button.backgroundColor('#EF4444');
            Button.fontColor('#FFFFFF');
            Button.borderRadius(20);
            Button.scale({ x: this.buttonScale, y: this.buttonScale });
            Button.opacity(this.buttonOpacity);
            Context.animation(null);
            Button.onClick(() => {
                Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                    this.buttonScale = 0.95;
                });
                setTimeout(() => {
                    Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                        this.buttonScale = 1;
                    });
                }, 150);
                this.resetTimer();
            });
        }, Button);
        Button.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            If.create();
            if (!this.isTiming) {
                this.ifElseBranchUpdateFunction(0, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Button.createWithLabel('ÂºÄÂßã');
                        Context.animation({
                            duration: 500,
                            curve: Curve.Friction,
                            delay: 400
                        });
                        Button.width(100);
                        Button.height(40);
                        Button.backgroundColor('#10B981');
                        Button.fontColor('#FFFFFF');
                        Button.borderRadius(20);
                        Button.scale({ x: this.buttonScale, y: this.buttonScale });
                        Button.opacity(this.buttonOpacity);
                        Context.animation(null);
                        Button.onClick(() => {
                            Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                                this.buttonScale = 0.95;
                            });
                            setTimeout(() => {
                                Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                                    this.buttonScale = 1;
                                });
                            }, 150);
                            this.startTimer();
                        });
                    }, Button);
                    Button.pop();
                });
            }
            else {
                this.ifElseBranchUpdateFunction(1, () => {
                    this.observeComponentCreation2((elmtId, isInitialRender) => {
                        Button.createWithLabel('ÂÅúÊ≠¢');
                        Context.animation({
                            duration: 500,
                            curve: Curve.EaseOut,
                            delay: 400
                        });
                        Button.width(100);
                        Button.height(40);
                        Button.backgroundColor('#F59E0B');
                        Button.fontColor('#FFFFFF');
                        Button.borderRadius(20);
                        Button.scale({ x: this.buttonScale, y: this.buttonScale });
                        Button.opacity(this.buttonOpacity);
                        Context.animation(null);
                        Button.onClick(() => {
                            Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                                this.buttonScale = 0.95;
                            });
                            setTimeout(() => {
                                Context.animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                                    this.buttonScale = 1;
                                });
                            }, 150);
                            this.stopTimer();
                        });
                    }, Button);
                    Button.pop();
                });
            }
        }, If);
        If.pop();
        // ÊéßÂà∂ÊåâÈíÆ
        Row.pop();
        Column.pop();
        //‰∏ª‰ΩìÈÉ®ÂàÜ
        Scroll.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            // Â∫ïÈÉ®ÂØºËà™
            Row.create();
            // Â∫ïÈÉ®ÂØºËà™
            Row.width('100%');
            // Â∫ïÈÉ®ÂØºËà™
            Row.padding({ top: 12, bottom: 8 });
            // Â∫ïÈÉ®ÂØºËà™
            Row.backgroundColor('#FFFFFF');
            // Â∫ïÈÉ®ÂØºËà™
            Row.border({
                width: { top: 1 },
                color: '#E5E7EB'
            });
        }, Row);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 0
            });
            Column.width('25%');
            Column.alignItems(HorizontalAlign.Center);
            Column.onClick(() => {
                // È¶ñÈ°µÊåâÈíÆÔºåÊó†ÈúÄÂØºËà™
            });
            Column.scale({ x: this.iconScale, y: this.iconScale });
            Column.opacity(this.iconOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 16777244, "type": 20000, params: [], "bundleName": "com.example.cubetime", "moduleName": "entry" });
            Context.animation({
                duration: 500,
                curve: Curve.Friction
            });
            Image.width(24);
            Image.height(24);
            Image.fillColor('#6366F1');
            Image.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('È¶ñÈ°µ');
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Text.fontSize(12);
            Text.fontColor('#6366F1');
            Text.margin({ top: 4 });
            Text.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 0
            });
            Column.width('25%');
            Column.alignItems(HorizontalAlign.Center);
            Column.onClick(() => {
                this.navigateTo('Pomodoro');
            });
            Column.scale({ x: this.iconScale, y: this.iconScale });
            Column.opacity(this.iconOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 16777242, "type": 20000, params: [], "bundleName": "com.example.cubetime", "moduleName": "entry" });
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Image.width(24);
            Image.height(24);
            Image.fillColor('#6B7280');
            Image.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Áï™ËåÑÈíü');
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Text.fontSize(12);
            Text.fontColor('#6B7280');
            Text.margin({ top: 4 });
            Text.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 0
            });
            Column.width('25%');
            Column.alignItems(HorizontalAlign.Center);
            Column.onClick(() => {
                this.navigateTo('Calendar');
            });
            Column.scale({ x: this.iconScale, y: this.iconScale });
            Column.opacity(this.iconOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 16777241, "type": 20000, params: [], "bundleName": "com.example.cubetime", "moduleName": "entry" });
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Image.width(24);
            Image.height(24);
            Image.fillColor('#6B7280');
            Image.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('Êó•ÂéÜ');
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Text.fontSize(12);
            Text.fontColor('#6B7280');
            Text.margin({ top: 4 });
            Text.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Text);
        Text.pop();
        Column.pop();
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Column.create();
            Context.animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 0
            });
            Column.width('25%');
            Column.alignItems(HorizontalAlign.Center);
            Column.onClick(() => {
                this.navigateTo('Settings');
            });
            Column.scale({ x: this.iconScale, y: this.iconScale });
            Column.opacity(this.iconOpacity);
            Context.animation(null);
        }, Column);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create({ "id": 16777243, "type": 20000, params: [], "bundleName": "com.example.cubetime", "moduleName": "entry" });
            Context.animation({
                duration: 800,
                curve: Curve.EaseOut,
                delay: 500
            });
            Image.width(24);
            Image.height(24);
            Image.fillColor('#6B7280');
            Image.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Image);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Text.create('ËÆæÁΩÆ');
            Context.animation({
                duration: 500,
                curve: Curve.EaseOut,
                delay: 500
            });
            Text.fontSize(12);
            Text.fontColor('#6B7280');
            Text.margin({ top: 4 });
            Text.scale({ x: this.navScale, y: this.navScale });
            Context.animation(null);
        }, Text);
        Text.pop();
        Column.pop();
        // Â∫ïÈÉ®ÂØºËà™
        Row.pop();
        Column.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName() {
        return "Index";
    }
}
registerNamedRoute(() => new Index(undefined, {}), "", { bundleName: "com.example.cubetime", moduleName: "entry", pagePath: "pages/Index", pageFullPath: "entry/src/main/ets/pages/Index", integratedHsp: "false", moduleType: "followWithHap" });
//# sourceMappingURL=Index.js.map¬ëŸEE:\Deveco_Project\test\entry\src\main\ets\utils\NavigationManager.etsŸ9E:\Deveco_Project\test\entry\src\main\ets\pages\Index.ets‘rBö™moduleName±isLocalDependencyØisNodeEntryFileßpkgPath±belongProjectPathßpkgName™pkgVersion±dependencyPkgInfo∞belongModulePath¨shouldEmitJs•entry√¬ºE:\Deveco_Project\test\entry∂E:\Deveco_Project\test•entry•1.0.0‘  ºE:\Deveco_Project\test\entry√√⁄Mgimport { NavigationManager, PageAnimationState } from '../utils/NavigationManager'
import { router } from '@kit.ArkUI'

interface CubeState {
  isSolved: boolean;
  currentTime: string;
  scrambleMoves: string[];
  sessionCount: number;
  bestTime: string;
  totalPracticeTime: string;
}

interface IndexState {
  navigationManager?: NavigationManager
  animationState: PageAnimationState
}

@Entry
@Component
struct Index {
  @State private cubeState: string = 'Êú™ÂºÄÂßã'
  @State private scramble: string = ''
  @State private solveTime: number = 0
  @State private isTiming: boolean = false
  @State private startTime: number = 0
  @State private showScramble: boolean = false
  @State private bestTime: number = 0
  
  // ÂºπÊÄßÂä®ÁîªÁä∂ÊÄÅÂèòÈáè
  @State private titleScale: number = 0.8
  @State private titleOpacity: number = 0
  @State private cardScale: number = 0.9
  @State private cardOpacity: number = 0
  @State private timerScale: number = 0.7
  @State private timerOpacity: number = 0
  @State private buttonScale: number = 0.8
  @State private buttonOpacity: number = 0
  @State private navScale: number = 0.9
  @State private navOpacity: number = 0
  @State private iconOpacity: number = 0
  @State private iconScale: number = 0
  
  @State private itemScale: number = 1
  @State private itemOpacity: number = 1
  @State private selectedTab: number = 0
  private timer: number = 0

  aboutToAppear() {
    this.generateScramble()
    this.loadBestTime()
    // È¶ñÊ¨°ËøõÂÖ•Êó∂Áõ¥Êé•ÊâßË°åÂä®ÁîªÔºå‰∏çÈáçÁΩÆÁä∂ÊÄÅ
    this.animateIn()
  }

  onPageShow() {
    // È°µÈù¢ÈáçÊñ∞ÊòæÁ§∫Êó∂ÈáçÁΩÆÂèØËßÅÊÄßÂíåÂä®Áîª
    this.resetVisibility()
    this.animateIn()
  }

  // È°µÈù¢Âä†ËΩΩÂä®Áîª - ÂçèË∞ÉÂä®ÁîªÈÄüÂ∫¶
  private animateIn() {
    // Âø´ÈÄü‰ΩÜÊúâÂ±ÇÊ¨°ÁöÑÂä®ÁîªÔºåÊÄªÊó∂Èïø400ms
    // Ê†áÈ¢ò - Á´ãÂç≥Âá∫Áé∞Ôºà200msÔºâ
    animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
      this.titleOpacity = 1
      this.titleScale = 1
    })

    // ‰∏ªË¶ÅÂÜÖÂÆπ - ËΩªÂæÆÂª∂ËøüÔºà250msÔºâ
    setTimeout(() => {
      animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
        this.cardOpacity = 1
        this.cardScale = 1
        this.timerOpacity = 1
        this.timerScale = 1
      })
    }, 100)

    // Êìç‰ΩúÊåâÈíÆ - ÊúÄÂêéÂá∫Áé∞Ôºà200msÔºâ
    setTimeout(() => {
      animateToImmediately({ duration: 200, curve: Curve.Friction }, () => {
        this.buttonOpacity = 1
        this.buttonScale = 1
        this.navOpacity = 1
        this.navScale = 1
        this.iconOpacity = 1
        this.iconScale = 1
      })
    }, 200)

    // Â∫ïÈÉ®ÂõæÊ†á
  }

  //need to be corrected
  private generateScramble() {
    const moves = ["R", "U", "F", "L", "D", "B"]
    const modifiers = ["", "'", "2"]
    let scramble = ""
    let lastMove = ""
    
    for (let i = 0; i < 20; i++) {
      let move = moves[Math.floor(Math.random() * moves.length)]
      while (move === lastMove) {
        move = moves[Math.floor(Math.random() * moves.length)]
      }
      lastMove = move
      const modifier = modifiers[Math.floor(Math.random() * modifiers.length)]
      scramble += move + modifier + " "
    }
    this.scramble = scramble.trim()
  }

  private loadBestTime() {
    this.bestTime = 0
  }

  private startTimer() {
    if (!this.isTiming) {
      this.isTiming = true
      this.startTime = Date.now()
      this.timer = setInterval(() => {
        this.solveTime = Date.now() - this.startTime
      }, 10)
    }
  }

  private stopTimer() {
    if (this.isTiming) {
      this.isTiming = false
      clearInterval(this.timer)
      if (this.solveTime < this.bestTime || this.bestTime === 0) {
        this.bestTime = this.solveTime
      }
    }
  }

  private resetTimer() {
    this.solveTime = 0
    this.isTiming = false
    clearInterval(this.timer)
    this.generateScramble()
  }

  private formatTime(ms: number): string {
    const seconds = Math.floor(ms / 1000)
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    const milliseconds = Math.floor((ms % 1000) / 10)
    
    if (minutes > 0) {
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(2, '0')}`
    } else {
      return `${seconds}.${milliseconds.toString().padStart(2, '0')}`
    }
  }

  // ‰ΩøÁî®Ëá™ÂÆö‰πâÂä®ÁîªÂ∫èÂàóÁöÑÈ°µÈù¢ÂàáÊç¢
  private navigateTo(page: string) {
    this.animateTransition(() => {
      NavigationManager.getInstance().navigateTo(page);
    });
  }

  // È°µÈù¢ÂàáÊç¢Âä®Áîª - Â∫ïÈÉ®ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®
  private animateTransition(callback: () => void) {
    animateToImmediately({ 
      duration: 300, 
      curve: Curve.Friction,
      onFinish: callback
    }, () => {
      // ÂØºËà™Êù°‰øùÊåÅ‰∏çÂä®ÔºåÂè™ÈöêËóèÂÖ∂‰ªñÂÖÉÁ¥†
      this.titleOpacity = 0
      this.titleScale = 0.3
      this.cardOpacity = 0
      this.cardScale = 0.3
      this.timerOpacity = 0
      this.timerScale = 0.3
      this.buttonOpacity = 0
      this.buttonScale = 0.3
      // ÂØºËà™Êù°‰øùÊåÅÂèØËßÅÂíåÂéüÂßãÂ§ßÂ∞è
      this.navOpacity = 1
      this.navScale = 1
      this.iconOpacity = 0
      this.iconScale = 0.3
    })
  }

  // ÈáçÁΩÆÈ°µÈù¢ÂèØËßÅÊÄßÔºàËß£ÂÜ≥ËøîÂõûÁ©∫ÁôΩÈóÆÈ¢òÔºâ
  private resetVisibility(): void {
    // Âº∫Âà∂ÈáçÁΩÆÊâÄÊúâÂä®ÁîªÁä∂ÊÄÅ‰∏∫ÂèØËßÅÔºåÂØºËà™Êù°ÂßãÁªà‰øùÊåÅÂèØËßÅ
    this.titleScale = 1
    this.titleOpacity = 1
    this.cardScale = 1
    this.cardOpacity = 1
    this.itemScale = 1
    this.itemOpacity = 1
    this.buttonScale = 1
    this.buttonOpacity = 1
    this.timerScale = 1
    this.timerOpacity = 1
    this.navScale = 1
    this.navOpacity = 1
  }

  build() {
    Column() {
      // Áªü‰∏ÄÁ¥´Ëâ≤ËÉåÊôØÊ†áÈ¢òÊ†èÔºåËûçÂÖ•Áä∂ÊÄÅÊ†è
      Column() {
        Row() {
          Text('  CubeTime')
            .width('25%')
            .fontSize(32)
            .fontWeight(FontWeight.Bold)
            .fontColor('#FFFFFF')
            .layoutWeight(1)
            .textAlign(TextAlign.Start)
            .scale({ x: this.titleScale, y: this.titleScale })
            .opacity(this.titleOpacity)
            .animation({
              duration: 500,
              curve: Curve.Friction
            })
        }
        .width('100%')
        .height(38)
        .justifyContent(FlexAlign.Center)
        .alignItems(VerticalAlign.Top)
        Row() {
          Text('      ‰∏Ä‰∏™Êô∫ËÉΩÊó∂Èó¥ÁÆ°ÁêÜapp')
            .width('20%')
            .fontSize(10)
            .fontWeight(FontWeight.Normal)
            .fontColor('#FFFFFF')
            .layoutWeight(1)
            .textAlign(TextAlign.Start)
            .scale({ x: this.titleScale, y: this.titleScale })
            .opacity(0.6)
            .animation({
              duration: 500,
              curve: Curve.Friction
            })
        }
        .justifyContent(FlexAlign.Center)
        .alignItems(VerticalAlign.Top)
        .height(17)
      }
      .width('100%')
      .backgroundColor('#6366F1')
      .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])

      //‰∏ª‰ΩìÈÉ®ÂàÜ
      Scroll() {
        Column() {
          // È≠îÊñπÁä∂ÊÄÅÊòæÁ§∫
          Column() {
            Text('È≠îÊñπÁä∂ÊÄÅ')
              .fontSize(18)
              .fontWeight(FontWeight.Bold)
              .fontColor('#1F2937')
              .margin({ bottom: 8 })
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
              duration: 500,
              curve: Curve.Friction
            })

            Text(this.cubeState)
              .fontSize(16)
              .fontColor('#6B7280')
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction
              })
          }
          .width('90%')
          .padding(16)
          .backgroundColor('#FFFFFF')
          .borderRadius(12)
          .margin({ left: 16, right: 16, top: 16 })
          .scale({ x: this.cardScale, y: this.cardScale })
          .opacity(this.cardOpacity)
          .animation({
            duration: 500,
            curve: Curve.Friction
          })

          // Êâì‰π±ÊòæÁ§∫
          Column() {
            Text('Êâì‰π±')
              .fontSize(18)
              .fontWeight(FontWeight.Bold)
              .fontColor('#1F2937')
              .margin({ bottom: 8 })
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 100
            })

            Text(this.scramble)
              .fontSize(16)
              .fontColor('#374151')
              .textAlign(TextAlign.Center)
              .width('100%')
              .padding(12)
              .backgroundColor('#FFFFFF')
              .borderRadius(8)
              .border({ width: 1, color: '#E5E7EB' })
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 100
              })
          }
          .width('100%')
          .padding(16)
          .margin({ left: 16, right: 16 })
          .scale({ x: this.cardScale, y: this.cardScale })
          .opacity(this.cardOpacity)
          .animation({
            duration: 500,
            curve: Curve.Friction,
            delay: 100
          })

          // ËÆ°Êó∂Âô®ÊòæÁ§∫
          Column() {
            Text(this.formatTime(this.solveTime))
              .fontSize(48)
              .fontWeight(FontWeight.Bold)
              .fontColor('#1F2937')
              .textAlign(TextAlign.Center)
              .width('100%')
              .padding(32)
              .backgroundColor('#FFFFFF')
              .borderRadius(16)
              .border({ width: 2, color: '#6366F1' })
              .scale({ x: this.timerScale, y: this.timerScale })
              .opacity(this.timerOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 200
            })
          }
          .width('100%')
          .padding(16)
          .scale({ x: this.timerScale, y: this.timerScale })
          .opacity(this.timerOpacity)
          .animation({
            duration: 500,
            curve: Curve.Friction,
            delay: 200
          })

          // ÊúÄ‰Ω≥Êó∂Èó¥
          Column() {
            Text('ÊúÄ‰Ω≥Êó∂Èó¥')
              .fontSize(16)
              .fontColor('#6B7280')
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 300
            })
            Text(this.formatTime(this.bestTime))
              .fontSize(24)
              .fontWeight(FontWeight.Bold)
              .fontColor('#059669')
              .scale({ x: this.cardScale, y: this.cardScale })
              .opacity(this.cardOpacity)
              .animation({
                duration: 500,
                curve: Curve.Friction,
                delay: 300
              })
          }
          .width('100%')
          .padding(16)
          .backgroundColor('#F0FDF4')
          .borderRadius(12)
          .margin({ left: 16, right: 16 })
          .scale({ x: this.cardScale, y: this.cardScale })
          .opacity(this.cardOpacity)
          .animation({
            duration: 500,
            curve: Curve.EaseOut,
            delay: 300
          })

          // ÊéßÂà∂ÊåâÈíÆ
          Row() {
            Button('ÈáçÁΩÆ')
              .width(100)
              .height(40)
              .backgroundColor('#EF4444')
              .fontColor('#FFFFFF')
              .borderRadius(20)
              .scale({ x: this.buttonScale, y: this.buttonScale })
              .opacity(this.buttonOpacity)
              .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 400
            })
              .onClick(() => {
                animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                  this.buttonScale = 0.95
                })
                setTimeout(() => {
                  animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                    this.buttonScale = 1
                  })
                }, 150)
                this.resetTimer()
              })

            if (!this.isTiming) {
              Button('ÂºÄÂßã')
                .width(100)
                .height(40)
                .backgroundColor('#10B981')
                .fontColor('#FFFFFF')
                .borderRadius(20)
                .scale({ x: this.buttonScale, y: this.buttonScale })
                .opacity(this.buttonOpacity)
                .animation({
                  duration: 500,
                  curve: Curve.Friction,
                  delay: 400
                })
                .onClick(() => {
                  animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                    this.buttonScale = 0.95
                  })
                  setTimeout(() => {
                    animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                      this.buttonScale = 1
                    })
                  }, 150)
                  this.startTimer()
                })
            } else {
              Button('ÂÅúÊ≠¢')
                .width(100)
                .height(40)
                .backgroundColor('#F59E0B')
                .fontColor('#FFFFFF')
                .borderRadius(20)
                .scale({ x: this.buttonScale, y: this.buttonScale })
                .opacity(this.buttonOpacity)
                .animation({
                  duration: 500,
                  curve: Curve.EaseOut,
                  delay: 400
                })
                .onClick(() => {
                  animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                    this.buttonScale = 0.95
                  })
                  setTimeout(() => {
                    animateToImmediately({ duration: 300, curve: Curve.Friction }, () => {
                      this.buttonScale = 1
                    })
                  }, 150)
                  this.stopTimer()
                })
            }
          }
          .width('100%')
          .justifyContent(FlexAlign.SpaceEvenly)
          .padding(16)
          .scale({ x: this.buttonScale, y: this.buttonScale })
          .opacity(this.buttonOpacity)
          .animation({
            duration: 500,
            curve: Curve.Friction,
            delay: 400
          })
        }
      }
      .layoutWeight(1)

      // Â∫ïÈÉ®ÂØºËà™
      Row() {
        Column() {
          Image($r('app.media.ic_tasks'))
            .width(24)
            .height(24)
            .fillColor('#6366F1')
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.Friction
            })
          Text('È¶ñÈ°µ')
            .fontSize(12)
            .fontColor('#6366F1')
            .margin({ top: 4 })
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
        }
        .width('25%')
        .alignItems(HorizontalAlign.Center)
        .onClick(() => {
            // È¶ñÈ°µÊåâÈíÆÔºåÊó†ÈúÄÂØºËà™
        })
        .scale({ x: this.iconScale, y: this.iconScale })
        .opacity(this.iconOpacity)
        .animation({
          duration: 500,
          curve: Curve.Friction,
          delay: 0
        })

        Column() {
          Image($r('app.media.ic_pomodoro'))
            .width(24)
            .height(24)
            .fillColor('#6B7280')
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
          Text('Áï™ËåÑÈíü')
            .fontSize(12)
            .fontColor('#6B7280')
            .margin({ top: 4 })
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
        }
        .width('25%')
        .alignItems(HorizontalAlign.Center)
        .onClick(() => {
          this.navigateTo('Pomodoro')
        })
        .scale({ x: this.iconScale, y: this.iconScale })
        .opacity(this.iconOpacity)
        .animation({
          duration: 500,
          curve: Curve.Friction,
          delay: 0
        })

        Column() {
          Image($r('app.media.ic_calendar'))
            .width(24)
            .height(24)
            .fillColor('#6B7280')
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
          Text('Êó•ÂéÜ')
            .fontSize(12)
            .fontColor('#6B7280')
            .margin({ top: 4 })
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
        }
        .width('25%')
        .alignItems(HorizontalAlign.Center)
        .onClick(() => {
          this.navigateTo('Calendar')
        })
        .scale({ x: this.iconScale, y: this.iconScale })
        .opacity(this.iconOpacity)
        .animation({
          duration: 500,
          curve: Curve.Friction,
          delay: 0
        })

        Column() {
          Image($r('app.media.ic_settings'))
            .width(24)
            .height(24)
            .fillColor('#6B7280')
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 800,
              curve: Curve.EaseOut,
              delay: 500
            })
          Text('ËÆæÁΩÆ')
            .fontSize(12)
            .fontColor('#6B7280')
            .margin({ top: 4 })
            .scale({ x: this.navScale, y: this.navScale })
            .animation({
              duration: 500,
              curve: Curve.EaseOut,
              delay: 500
            })
        }
        .width('25%')
        .alignItems(HorizontalAlign.Center)
        .onClick(() => {
          this.navigateTo('Settings')
        })
        .scale({ x: this.iconScale, y: this.iconScale })
        .opacity(this.iconOpacity)
        .animation({
          duration: 500,
          curve: Curve.Friction,
          delay: 0
        })
      }
      .width('100%')
      .padding({ top: 12, bottom: 8 })
      .backgroundColor('#FFFFFF')
      .border({
        width: { top: 1 },
        color: '#E5E7EB'
      })

    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F2F2F7')
  }
}
¿‘rCë∫../utils/NavigationManager‘rDó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA¬ŸEE:\Deveco_Project\test\entry\src\main\ets\utils\NavigationManager.etsA√™oh-resolve¬ì‘rEñßversion§file™sourceRootßsources•names®mappings®Index.js†ë©Index.etsê‹
êêêòî    î  î	  	î  î  0î"  6î>  ÃRî?  ÃRíî î ëî  êêêêíî8 %î= *íî7 $î9 &íî8 %î9 &íî7 %î< *íî8 %î9 &íî; )îÃ@ .íî7 $î8 %íî î êíî9 &î< )íî; (î< )íî8 %î; (íî:  'î;  (íî9 !&î< !)íî; "(î< ")íî: #'î= #*íî< $)î= $*íî7 %$î: %'íî9 &&î: &'íî: ''î; '(íî8 (%î9 (&íî8 *%î9 *&íî: +'î; +(íî: ,'î; ,(íî -î -êêëî êêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî î êêíî  î  êêíî  î  êêíî !î !êêíî !î !êêíî "î "êêíî "î "êêíî #î #êêíî #î #êêíî $î $êêíî $î $êêíî %î %êêíî %î %êêíî &î &êêíî &î &êêíî 'î 'êêíî 'î 'êêíî (î (êêíî (î (êêíî *î *êêíî *î *êêíî +î +êêíî +î +êêíî ,î ,êêíî ,î ,êêíî /î /ñî 0î 0î 0	î 0î 0î  0ñî 1î 1î 1	î 1î 1î 1íî 2î 2ñî 3î 3î 3	î 3î 3î 3íî 4î 4íî 6î 6íî 7î 7ñî 8î 8î 8	î 8î 8î 8ñî 9î 9î 9	î 9î 9î 9íî :î :íî <î <íî =
î =íî >î >íî ?î ?‹ î Ã@î% Ã@î' Ã@î/ Ã@#î1 Ã@%î4 Ã@(î6 Ã@*î; Ã@/î= Ã@1îÃB Ã@6îÃC Ã@7îÃK Ã@?îÃM Ã@ÃAîÃO Ã@ÃCîÃR Ã@ÃFîÃT Ã@ÃHóî ÃAî ÃA
î ÃAî ÃAî  ÃAî! ÃAî" ÃAóî ÃBî ÃB
î ÃBî ÃBî ÃBî ÃBî  ÃBîî ÃCî	 ÃCî
 ÃCî ÃCíî ÃEî ÃEïî ÃFî ÃFî ÃFî ÃFî ÃF‹ î ÃGî) ÃGî+ ÃGî3 ÃG%î5 ÃG'î8 ÃG*î: ÃG,î? ÃG1îÃA ÃG3îÃF ÃG8îÃG ÃG9îÃO ÃGÃAîÃQ ÃGÃCîÃS ÃGÃEîÃV ÃGÃHîÃX ÃGÃJóî ÃHî ÃHî ÃHî  ÃHî# ÃHî$ ÃHî% ÃHóî ÃIî ÃIî ÃIî ÃIî! ÃIî" ÃIî# ÃIóî ÃJî ÃJî ÃJî! ÃJî$ ÃJî% ÃJî& ÃJóî ÃKî ÃKî ÃKî ÃKî" ÃKî# ÃKî$ ÃKîî ÃLî ÃLî ÃLî ÃLñî ÃMî	 ÃMî ÃMî ÃM
î ÃMî ÃMíî ÃOî ÃOïî ÃPî ÃPî ÃPî ÃPî ÃP‹ î ÃQî) ÃQî+ ÃQî3 ÃQ%î5 ÃQ'î8 ÃQ*î: ÃQ,î? ÃQ1îÃA ÃQ3îÃF ÃQ8îÃG ÃQ9îÃO ÃQÃAîÃQ ÃQÃCîÃS ÃQÃEîÃV ÃQÃHîÃX ÃQÃJóî ÃRî ÃRî ÃRî" ÃRî% ÃRî& ÃRî' ÃRóî ÃSî ÃSî ÃSî  ÃSî# ÃSî$ ÃSî% ÃSóî ÃTî ÃTî ÃTî ÃTî" ÃTî# ÃTî$ ÃTóî ÃUî ÃUî ÃUî ÃUî  ÃUî! ÃUî" ÃUóî ÃVî ÃVî ÃVî  ÃVî# ÃVî$ ÃVî% ÃVóî ÃWî ÃWî ÃWî ÃWî! ÃWî" ÃWî# ÃWîî ÃXî ÃXî ÃXî ÃXñî ÃYî	 ÃYî ÃYî ÃY
î ÃYî ÃYíî Ã[î Ã[íî Ã\î Ã\íî Ã^î Ã^íî Ã_
î Ã_‹ î Ã`î Ã`
î Ã`î Ã`î Ã`î Ã`î Ã`î Ã`î! Ã`î$ Ã` î& Ã`"î) Ã`%î+ Ã`'î. Ã`*î0 Ã`,î3 Ã`/î4 Ã`0î5 Ã`0úî Ãaî Ãa
î Ãaî Ãaî Ãaî Ãaî Ãaî" Ãaî$ Ãa î' Ãa#î( Ãa$î) Ãa$ñî Ãbî Ãbî Ãbî Ãbî Ãbî Ãbñî Ãcî Ãcî Ãcî Ãcî Ãcî Ãcûî Ãeî Ãe	î Ãeî Ãeî Ãeî Ãeî Ãeî Ãeî Ãeî Ãeî  Ãeî! Ãeî# Ãeî% Ãe!‹ î Ãfî Ãf
î Ãfî Ãfî Ãfî Ãfî! Ãfî" Ãfî' Ãf!î( Ãf"î, Ãf&î- Ãf'î3 Ãf-î5 Ãf/î8 Ãf2î= Ãf7î> Ãf8îÃD Ãf>îÃE Ãf?îÃF ÃfÃ@îÃG ÃfÃ@ñî Ãgî Ãgî Ãgî Ãgî$ Ãgî& Ãg ‹ î Ãhî Ãhî Ãhî Ãhî Ãhî! Ãhî" Ãhî' Ãhî( Ãh î, Ãh$î- Ãh%î3 Ãh+î5 Ãh-î8 Ãh0î= Ãh5î> Ãh6îÃD Ãh<îÃE Ãh=îÃF Ãh>îÃG Ãh>ëî Ãiïî Ãjî Ãjî Ãjî Ãjî Ãj‹ î Ãkî Ãkî Ãkî Ãkî& Ãk î' Ãk!î+ Ãk%î, Ãk&î1 Ãk+î2 Ãk,î6 Ãk0î7 Ãk1î= Ãk7î? Ãk9îÃB Ãk<îÃK ÃkÃEîÃL ÃkÃFîÃR ÃkÃLîÃS ÃkÃMîÃT ÃkÃNîÃU ÃkÃNôî Ãlî Ãlî Ãlî Ãlî Ãlî' Ãl!î* Ãl$î- Ãl'î. Ãl'ëî	 Ãmöî Ãnî Ãnî Ãn	î Ãnî Ãnî  Ãnî! Ãnî% Ãn!î' Ãn#î( Ãn#íî Ãoî Ãoíî Ãq
î Ãqóî Ãrî Ãrî Ãr	î Ãrî Ãrî Ãrî Ãríî Ãsî Ãsíî Ãu
î Ãuóî Ãvî Ãvî Ãv	î Ãvî Ãvî Ãvî Ãvóî Ãwî Ãw
î Ãwî Ãwî Ãwî  Ãwî! Ãwöî Ãxî Ãx
î Ãxî Ãxî Ãxî! Ãxî" Ãxî% Ãxî' Ãx!î( Ãx!ôî Ãyî Ãy
î Ãyî Ãyî Ãyî$ Ãyî% Ãyî( Ãy"î* Ãy$ûî Ãzî Ãzî Ãzî Ãzî! Ãzî% Ãzî& Ãzî) Ãz!î+ Ãz#î. Ãz&î2 Ãz*î3 Ãz+î< Ãz4î= Ãz4ñî Ã{î Ã{î Ã{	î Ã{î Ã{î Ã{ëî	 Ã|íî Ã}î Ã}íî Ã
î Ãñî ÃÄî ÃÄî ÃÄî ÃÄî ÃÄî ÃÄóî ÃÅî ÃÅ
î ÃÅî ÃÅî ÃÅî! ÃÅî" ÃÅòî ÃÇî ÃÇî ÃÇî ÃÇî ÃÇî$ ÃÇî% ÃÇî& ÃÇ‹ î ÃÉî ÃÉ
î ÃÉî ÃÉî ÃÉî! ÃÉî% ÃÉî& ÃÉ î. ÃÉ(î2 ÃÉ,î6 ÃÉ0î7 ÃÉ1î? ÃÉ9îÃD ÃÉ>îÃE ÃÉ?îÃG ÃÉÃAôî ÃÑî ÃÑî ÃÑî ÃÑî  ÃÑî$ ÃÑî% ÃÑî. ÃÑ&î/ ÃÑ&ëî ÃÖëî	 ÃÜíî Ãáî Ãáíî Ãâ
î Ãâóî Ãäî Ãäî Ãä	î Ãäî Ãäî Ãäî Ãäóî Ããî Ããî Ãã	î Ããî Ããî Ããî Ããòî Ãåî Ãåî Ãåî Ãåî Ãåî  Ãåî! Ãåî" Ãåñî Ãçî Ãçî Ãç	î Ãçî Ãçî  Ãçíî Ãéî Ãéîî Ãê
î Ãêî Ãêî Ãêùî Ãëî Ãë
î Ãëî Ãëî Ãëî Ãëî" Ãëî# Ãëî% Ãë!î( Ãë$î, Ãë(î- Ãë)î. Ãë)ùî Ãíî Ãí
î Ãíî Ãíî Ãíî Ãíî" Ãíî# Ãíî* Ãí&î- Ãí)î/ Ãí+î0 Ãí,î1 Ãí,òî Ãìî Ãì
î Ãìî! Ãìî( Ãì$î+ Ãì'î- Ãì)î. Ãì)‹ î Ãîî Ãî
î Ãîî Ãîî! Ãîî" Ãîî' Ãî#î( Ãî$î) Ãî%î+ Ãî'î. Ãî*î2 Ãî.î3 Ãî/î6 Ãî2î8 Ãî4î9 Ãî5î: Ãî5ñî Ãñî Ãñî Ãñî Ãñî Ãñî Ãñ‹ î Ãóî Ãóî Ãóî Ãóî! Ãóî1 Ãó+î2 Ãó,î: Ãó4î< Ãó6î= Ãó7îÃE Ãó?îÃF ÃóÃ@îÃG ÃóÃAîÃI ÃóÃCîÃL ÃóÃFîÃM ÃóÃGîÃQ ÃóÃKîÃ] ÃóÃWîÃ^ ÃóÃXîÃf ÃóÃ`îÃh ÃóÃbîÃi ÃóÃcîÃq ÃóÃkîÃr ÃóÃlîÃs ÃóÃmîÃu ÃóÃoîÃx ÃóÃrîÃy ÃóÃsîÃ{ ÃóÃuîÃ| ÃóÃuëî	 Ãòëî Ãò‹ î Ãôî Ãôî Ãôî Ãôî! Ãôî- Ãô'î. Ãô(î6 Ãô0î8 Ãô2î9 Ãô3îÃA Ãô;îÃB Ãô<îÃC Ãô=îÃE Ãô?îÃH ÃôÃBîÃI ÃôÃCîÃK ÃôÃEîÃL ÃôÃEëî	 Ãöíî Ãõî Ãõíî Ãùî Ãùîî Ãû
î Ãûî Ãûî Ãû!óî Ãüî Ãüî Ãü	î Ãüî Ãüî" Ãüî$ Ãü õî Ã†î Ã†î Ã†î) Ã†#î+ Ã†%î, Ã†&î6 Ã†0î7 Ã†1î; Ã†5î< Ã†6î= Ã†7îî Ã°î	 Ã°î
 Ã°î Ã°íî Ã¢î Ã¢íî Ã§î Ã§îî Ã•
î Ã•î Ã•î Ã•0íî Ã¶î% Ã¶îî Ãßî Ãßî Ãßî Ãßñî Ã®î Ã®î Ã®î Ã®î Ã®î! Ã®îî Ã©î Ã©î Ã©î Ã©îî	 Ã™î Ã™î Ã™
î Ã™íî Ã´î Ã´óî Ã¨î Ã¨
î Ã¨î Ã¨î  Ã¨î! Ã¨î" Ã¨óî Ã≠î Ã≠
î Ã≠î Ã≠î Ã≠î! Ã≠î" Ã≠óî ÃÆî ÃÆ
î ÃÆî ÃÆî ÃÆî  ÃÆî! ÃÆóî ÃØî ÃØ
î ÃØî ÃØî ÃØî  ÃØî! ÃØóî Ã∞î Ã∞
î Ã∞î Ã∞î  Ã∞î! Ã∞î" Ã∞óî Ã±î Ã±
î Ã±î Ã±î Ã±î! Ã±î" Ã±óî Ã≤î Ã≤
î Ã≤î Ã≤î! Ã≤î" Ã≤î# Ã≤óî Ã≥î Ã≥
î Ã≥î Ã≥î Ã≥î" Ã≥î# Ã≥íî Ã¥î Ã¥óî Ãµî Ãµ
î Ãµî Ãµî Ãµî Ãµî  Ãµóî Ã∂î Ã∂
î Ã∂î Ã∂î Ã∂î Ã∂î Ã∂óî Ã∑î Ã∑
î Ã∑î Ã∑î Ã∑î  Ã∑î! Ã∑óî Ã∏î Ã∏
î Ã∏î Ã∏î Ã∏î  Ã∏î! Ã∏îî Ãπî	 Ãπî
 Ãπî Ãπíî Ã∫î Ã∫íî Ãºî Ãºíî ÃΩ
î ÃΩíî Ãæî" Ãæóî Ãøî Ãøî Ãø	î Ãøî Ãøî Ãøî Ãøóî Ã¿î Ã¿î Ã¿	î Ã¿î Ã¿î Ã¿î Ã¿óî Ã¡î Ã¡î Ã¡	î Ã¡î Ã¡î Ã¡î Ã¡óî Ã¬î Ã¬î Ã¬	î Ã¬î Ã¬î Ã¬î Ã¬óî Ã√î Ã√î Ã√	î Ã√î Ã√î Ã√î Ã√óî Ãƒî Ãƒî Ãƒ	î Ãƒî Ãƒî Ãƒî Ãƒóî Ã≈î Ã≈î Ã≈	î Ã≈î Ã≈î Ã≈î Ã≈óî Ã∆î Ã∆î Ã∆	î Ã∆î Ã∆î Ã∆î Ã∆óî Ã«î Ã«î Ã«	î Ã«î Ã«î Ã«î Ã«óî Ã»î Ã»î Ã»	î Ã»î Ã»î Ã»î Ã»óî Ã…î Ã…î Ã…	î Ã…î Ã…î Ã…î Ã…óî Ã î Ã î Ã 	î Ã î Ã î Ã î Ã íî ÃÀî ÃÀëî ÃÕêíî ÃŒî ÃŒ
ñî ÃŒî ÃŒ
î ÕÉî ÕÉ
î ÕÉî ÕÉñî ÃŒî ÃŒ
î ÕÑî ÕÑî ÕÑî  ÕÑñî ÃŒî ÃŒ
î ÕÖî" ÕÖî# ÕÖî, ÕÖêêíî Ãœî Ãœíî Ã–î Ã–íî Ãœî Ãœñî Ã–î Ã–î Ã˜î Ã˜î Ã˜î Ã˜íî Ãœî Ãœñî Ã–î Ã–î Ã¯î" Ã¯î# Ã¯î, Ã¯ íî Ãœî Ãœ‹ î Ã–î Ã–î Ã˘î! Ã˘î" Ã˘î# Ã˘î/ Ã˘#î0 Ã˘$î6 Ã˘*î7 Ã˘+î9 Ã˘-î: Ã˘.îÃF Ã˘:îÃG Ã˘;îÃJ Ã˘>îÃK Ã˘?êêíî Ã—î Ã—ñî Ã—î Ã—î Ã‡	î Ã‡î Ã‡î Ã‡ñî Ã—î Ã—î Ã·	î Ã·î Ã·î Ã·òî Ã—î Ã—î Ã‚	î Ã‚î Ã‚î( Ã‚!î) Ã‚"î/ Ã‚(òî Ã—î Ã—î Ã„	î Ã„î Ã„î( Ã„!î) Ã„"î, Ã„%êêîî Ã“
î Ã“î Ã“î$ Ã“ìî Ã€î Ã€î Ã€îî Ã‹î Ã‹î Ã‹î Ã‹ñî Ã›î Ã›î Ã›î Ã›î Ã›î% Ã›#ëî Ãﬁñî Ã“
î Ã“î Ã”î Ã”î Ã”î Ã”ñî Ã“
î Ã“î Ã‘î Ã‘î Ã‘î Ã‘òî Ã“
î Ã“î Ã’î Ã’î Ã’î& Ã’"î' Ã’#î+ Ã’'ñî Ã“
î Ã“î Ã÷î Ã÷î Ã÷î$ Ã÷ ñî Ã“
î Ã“î Ã◊î Ã◊î Ã◊î Ã◊òî Ã“
î Ã“î Ãÿî Ãÿî Ãÿî$ Ãÿ î% Ãÿ!î* Ãÿ&‹ î Ã“
î Ã“î ÃŸî ÃŸî ÃŸî ÃŸî ÃŸî ÃŸî  ÃŸî! ÃŸî+ ÃŸ'î- ÃŸ)î. ÃŸ*î0 ÃŸ,î4 ÃŸ0î5 ÃŸ1î? ÃŸ;îÃA ÃŸ=òî Ã“
î Ã“î Ã⁄î Ã⁄î Ã⁄î Ã⁄î Ã⁄î* Ã⁄&íî Ã€î Ã€êíî Ã“
î Ã“íî Ã—î Ã—êíî Ã‰î Ã‰òî Ã‰î Ã‰î ÃÛ	î ÃÛî ÃÛî( ÃÛ!î) ÃÛ"î/ ÃÛ(òî Ã‰î Ã‰î ÃÙ	î ÃÙî ÃÙî( ÃÙ!î) ÃÙ"î, ÃÙ%ñî Ã‰î Ã‰î Ãı	î Ãıî Ãıî Ãıêêîî ÃÂ
î ÃÂî ÃÂî+ ÃÂ"ìî ÃÓî ÃÓî ÃÓîî ÃÔî ÃÔî ÃÔî ÃÔñî Ãî Ãî Ãî Ãî Ãî% Ã#ëî ÃÒñî ÃÂ
î ÃÂî ÃÊî ÃÊî ÃÊî ÃÊñî ÃÂ
î ÃÂî ÃÁî ÃÁî ÃÁî ÃÁòî ÃÂ
î ÃÂî ÃËî ÃËî ÃËî& ÃË"î' ÃË#î- ÃË)ñî ÃÂ
î ÃÂî ÃÈî ÃÈî ÃÈî$ ÃÈ ñî ÃÂ
î ÃÂî ÃÍî ÃÍî ÃÍî ÃÍòî ÃÂ
î ÃÂî ÃÎî ÃÎî ÃÎî$ ÃÎ î% ÃÎ!î* ÃÎ&‹ î ÃÂ
î ÃÂî ÃÏî ÃÏî ÃÏî ÃÏî ÃÏî ÃÏî  ÃÏî! ÃÏî+ ÃÏ'î- ÃÏ)î. ÃÏ*î0 ÃÏ,î4 ÃÏ0î5 ÃÏ1î? ÃÏ;îÃA ÃÏ=ñî ÃÂ
î ÃÂî ÃÌî ÃÌî ÃÌî ÃÌíî ÃÓî ÃÓêíî ÃÂ
î ÃÂíî Ã‰î Ã‰íî Ãœî Ãœíî Ã–î Ã–êíî Ã˚î Ã˚íî Ã¸î Ã¸íî Ã˚î Ã˚ñî Ã¸î Ã¸î ÕÎî ÕÎî  ÕÎî! ÕÎêêíî Ã˝î Ã˝êêíî Ã˛
î Ã˛íî Ãˇ
î Ãˇìî Õî Õî Õîî Õî Õî Õî Õñî Õî Õî Õî Õî Õî% Õ!ëî Õ íî Ã˛
î Ã˛ñî Ãˇ
î Ãˇî Õî Õî Õî Õíî Ã˛
î Ã˛ñî Ãˇ
î Ãˇî Õî Õî Õî Õíî Ã˛
î Ã˛ñî Ãˇ
î Ãˇî Õî" Õî# Õî, Õ$íî Ã˛
î Ã˛ñî Ãˇ
î Ãˇî Õî Õî  Õî" Õíî Ã˛
î Ã˛‹ î Ãˇ
î Ãˇî Õî Õî Õî Õî  Õî" Õî$ Õî& Õî+ Õ#î- Õ%î/ Õ'î1 Õ)î4 Õ,î6 Õ.î8 Õ0î: Õ2íî Ã˛
î Ã˛‹ î Ãˇ
î Ãˇî Õî Õî Õî Õî Õî Õî" Õî# Õî, Õ$î. Õ&î/ Õ'î1 Õ)î5 Õ-î6 Õ.î? Õ7îÃA Õ9íî Ã˛
î Ã˛òî Ãˇ
î Ãˇî Õî Õî Õî Õî  Õî+ Õ#íî Õî Õêêîî Õ î Õ î Õ î Õ ìî Õî Õî Õîî Õî Õî Õî Õñî Õ	î Õ	î Õ	î Õ	î Õ	î% Õ	#ëî Õ
ñî Õ î Õ î Õî Õî Õî Õòî Õ î Õ î Õî Õî Õî& Õ$î' Õ%î+ Õ)ñî Õ î Õ î Õî Õî Õî$ Õ"öî Õ î Õ î Õî Õî Õî Õî  Õî" Õ î# Õ!î% Õ#‹ î Õ î Õ î Õî Õî Õî Õî Õî Õî  Õî! Õî* Õ(î, Õ*î- Õ+î/ Õ-î3 Õ1î4 Õ2î= Õ;î? Õ=òî Õ î Õ î Õî Õî Õî Õî Õî) Õ'íî Õî Õêíî Õ î Õ êñî Õî Õî Õî Õî Õî& Õìî Õî Õî Õîî Õî Õî Õî Õñî Õî Õî Õî Õî Õî% Õ%ëî Õñî Õî Õî Õî Õî Õî Õñî Õî Õî Õî Õî Õî$ Õ"‹ î Õî Õî Õî Õî Õî Õî Õî Õî  Õî! Õî* Õ(î, Õ*î- Õ+î/ Õ-î3 Õ1î4 Õ2î= Õ;î? Õ=òî Õî Õî Õî Õî Õî Õî Õî) Õ'íî Õî Õêíî Õî Õíî Ã˛
î Ã˛íî Ãˇ
î Ãˇêíî Õ"
î Õ"íî Õ#
î Õ#ìî ÕGî ÕGî ÕGîî ÕHî ÕHî ÕHî ÕHñî ÕIî ÕIî ÕIî ÕIî ÕIî% ÕI!îî ÕJî ÕJî ÕJî ÕJëî ÕKíî Õ"
î Õ"ñî Õ#
î Õ#î ÕBî ÕBî ÕBî ÕBíî Õ"
î Õ"ñî Õ#
î Õ#î ÕCî ÕCî ÕCî ÕCíî Õ"
î Õ"ûî Õ#
î Õ#î ÕDî ÕDî ÕDî ÕDî  ÕDî" ÕDî$ ÕDî& ÕDî+ ÕD#î- ÕD%î/ ÕD'î1 ÕD)íî Õ"
î Õ"‹ î Õ#
î Õ#î ÕEî ÕEî ÕEî ÕEî ÕEî ÕEî" ÕEî# ÕEî, ÕE$î. ÕE&î/ ÕE'î1 ÕE)î5 ÕE-î6 ÕE.î? ÕE7îÃA ÕE9íî Õ"
î Õ"òî Õ#
î Õ#î ÕFî ÕFî ÕFî ÕFî  ÕFî+ ÕF#íî ÕGî ÕGêêîî Õ$î Õ$î Õ$î Õ$ìî Õ+î Õ+î Õ+îî Õ,î Õ,î Õ,î Õ,ñî Õ-î Õ-î Õ-î Õ-î Õ-î% Õ-%îî Õ.î Õ.î Õ.î Õ.ëî Õ/ñî Õ$î Õ$î Õ%î Õ%î Õ%î Õ%òî Õ$î Õ$î Õ&î Õ&î Õ&î& Õ&$î' Õ&%î+ Õ&)ñî Õ$î Õ$î Õ'î Õ'î Õ'î$ Õ'"öî Õ$î Õ$î Õ(î Õ(î Õ(î Õ(î  Õ(î" Õ( î# Õ(!î% Õ(#‹ î Õ$î Õ$î Õ)î Õ)î Õ)î Õ)î Õ)î Õ)î  Õ)î! Õ)î* Õ)(î, Õ)*î- Õ)+î/ Õ)-î3 Õ)1î4 Õ)2î= Õ);î? Õ)=òî Õ$î Õ$î Õ*î Õ*î Õ*î Õ*î Õ*î) Õ*'íî Õ+î Õ+êíî Õ$î Õ$êñî Õ1î Õ1î Õ1î Õ1î Õ1î% Õ1ìî Õ<î Õ<î Õ<îî Õ=î Õ=î Õ=î Õ=ñî Õ>î Õ>î Õ>î Õ>î Õ>î% Õ>%îî Õ?î Õ?î Õ?î Õ?ëî Õ@ñî Õ1î Õ1î Õ2î Õ2î Õ2î Õ2ñî Õ1î Õ1î Õ3î Õ3î Õ3î$ Õ3"òî Õ1î Õ1î Õ4î Õ4î Õ4î$ Õ4"î% Õ4#î+ Õ4)ñî Õ1î Õ1î Õ5î Õ5î Õ5î Õ5ñî Õ1î Õ1î Õ6î Õ6î Õ6î Õ6ñî Õ1î Õ1î Õ7î  Õ7î! Õ7î* Õ7(ñî Õ1î Õ1î Õ8î Õ8î Õ8î Õ8ûî Õ1î Õ1î Õ9î Õ9î Õ9î Õ9î Õ9î! Õ9î" Õ9 î$ Õ9"î) Õ9'î+ Õ9)î4 Õ92î6 Õ94‹ î Õ1î Õ1î Õ:î Õ:î Õ:î Õ:î Õ:î Õ:î  Õ:î! Õ:î* Õ:(î, Õ:*î- Õ:+î/ Õ:-î3 Õ:1î4 Õ:2î= Õ:;î? Õ:=òî Õ1î Õ1î Õ;î Õ;î Õ;î Õ;î Õ;î) Õ;'íî Õ<î Õ<êíî Õ1î Õ1íî Õ"
î Õ"íî Õ#
î Õ#êíî ÕM
î ÕMíî ÕN
î ÕNìî Õeî Õeî Õeîî Õfî Õfî Õfî Õfñî Õgî Õgî Õgî Õgî Õgî% Õg!îî Õhî Õhî Õhî Õhëî Õiíî ÕM
î ÕMñî ÕN
î ÕNî Õaî Õaî Õaî Õaíî ÕM
î ÕMñî ÕN
î ÕNî Õbî Õbî Õbî Õbíî ÕM
î ÕM‹ î ÕN
î ÕNî Õcî Õcî Õcî Õcî Õcî Õcî" Õcî# Õcî- Õc%î/ Õc'î0 Õc(î2 Õc*î6 Õc.î7 Õc/îÃA Õc9îÃC Õc;íî ÕM
î ÕMòî ÕN
î ÕNî Õdî Õdî Õdî Õdî  Õdî, Õd$íî Õeî Õeêêõî ÕOî ÕOî ÕOî ÕOî ÕOî' ÕO î( ÕO!î, ÕO%î- ÕO&î6 ÕO/î7 ÕO0ìî Õ[î Õ[î Õ[îî Õ\î Õ\î Õ\î Õ\ñî Õ]î Õ]î Õ]î Õ]î Õ]î% Õ]%îî Õ^î Õ^î Õ^î Õ^ëî Õ_ñî ÕOî ÕOî ÕPî ÕPî ÕPî ÕPòî ÕOî ÕOî ÕQî ÕQî ÕQî& ÕQ$î' ÕQ%î+ ÕQ)ñî ÕOî ÕOî ÕRî ÕRî ÕRî$ ÕR"òî ÕOî ÕOî ÕSî ÕSî ÕSî$ ÕS"î% ÕS#î+ ÕS)ñî ÕOî ÕOî ÕTî ÕTî ÕTî ÕTñî ÕOî ÕOî ÕUî ÕUî ÕUî ÕUñî ÕOî ÕOî ÕVî  ÕVî! ÕVî* ÕV(ñî ÕOî ÕOî ÕWî ÕWî ÕWî  ÕWûî ÕOî ÕOî ÕXî ÕXî ÕXî ÕXî ÕXî! ÕXî" ÕX î$ ÕX"î) ÕX'î+ ÕX)î4 ÕX2î6 ÕX4‹ î ÕOî ÕOî ÕYî ÕYî ÕYî ÕYî ÕYî ÕYî  ÕYî! ÕYî+ ÕY)î- ÕY+î. ÕY,î0 ÕY.î4 ÕY2î5 ÕY3î? ÕY=îÃA ÕY?òî ÕOî ÕOî ÕZî ÕZî ÕZî ÕZî ÕZî* ÕZ(íî Õ[î Õ[êíî ÕOî ÕOíî ÕM
î ÕMíî ÕN
î ÕNêíî Õk
î Õkíî Õl
î Õlìî Õäî Õäî Õäîî Õãî Õãî Õãî Õãñî Õåî Õåî Õåî Õåî Õåî$ Õå îî Õçî Õçî Õçî Õçëî Õéíî Õk
î Õkñî Õl
î Õlî ÕÉî ÕÉî ÕÉî ÕÉíî Õk
î Õkñî Õl
î Õlî ÕÑî ÕÑî ÕÑî ÕÑíî Õk
î Õkñî Õl
î Õlî ÕÖî" ÕÖî# ÕÖî, ÕÖ$íî Õk
î Õkñî Õl
î Õlî ÕÜî ÕÜî  ÕÜî" ÕÜíî Õk
î Õkûî Õl
î Õlî Õáî Õáî Õáî Õáî  Õáî" Õáî$ Õáî& Õáî+ Õá#î- Õá%î/ Õá'î1 Õá)íî Õk
î Õk‹ î Õl
î Õlî Õàî Õàî Õàî Õàî Õàî Õàî" Õàî# Õàî, Õà$î. Õà&î/ Õà'î1 Õà)î5 Õà-î6 Õà.î? Õà7îÃA Õà9íî Õk
î Õkòî Õl
î Õlî Õâî Õâî Õâî Õâî  Õâî+ Õâ#íî Õäî Õäêêîî Õmî Õmî Õmî Õmìî Õrî Õrî Õrîî Õsî Õsî Õsî Õsñî Õtî Õtî Õtî Õtî Õtî% Õt%îî Õuî Õuî Õuî Õuëî Õvñî Õmî Õmî Õnî Õnî Õnî Õnñî Õmî Õmî Õoî Õoî Õoî$ Õo"‹ î Õmî Õmî Õpî Õpî Õpî Õpî Õpî Õpî  Õpî! Õpî* Õp(î, Õp*î- Õp+î/ Õp-î3 Õp1î4 Õp2î= Õp;î? Õp=òî Õmî Õmî Õqî Õqî Õqî Õqî Õqî) Õq'íî Õrî Õrêíî Õmî Õmêõî Õwî Õwî Õwî Õwî Õwî' Õw î( Õw!î, Õw%î- Õw&î5 Õw.î6 Õw/ìî Õ}î Õ}î Õ}îî Õ~î Õ~î Õ~î Õ~ñî Õî Õî Õî Õî Õî% Õ%îî ÕÄî ÕÄî ÕÄî ÕÄëî ÕÅñî Õwî Õwî Õxî Õxî Õxî Õxòî Õwî Õwî Õyî Õyî Õyî& Õy$î' Õy%î+ Õy)ñî Õwî Õwî Õzî Õzî Õzî$ Õz"‹ î Õwî Õwî Õ{î Õ{î Õ{î Õ{î Õ{î Õ{î  Õ{î! Õ{î* Õ{(î, Õ{*î- Õ{+î/ Õ{-î3 Õ{1î4 Õ{2î= Õ{;î? Õ{=òî Õwî Õwî Õ|î Õ|î Õ|î Õ|î Õ|î) Õ|'íî Õ}î Õ}êíî Õwî Õwíî Õk
î Õkíî Õl
î Õlêíî Õê
î Õêíî Õë
î Õëìî Õ‰î Õ‰î Õ‰îî ÕÂî ÕÂî ÕÂî ÕÂñî ÕÊî ÕÊî ÕÊî ÕÊî ÕÊî% ÕÊ!îî ÕÁî ÕÁî ÕÁî ÕÁëî ÕËíî Õê
î Õêñî Õë
î Õëî Õﬂî Õﬂî Õﬂî Õﬂíî Õê
î Õêòî Õë
î Õëî Õ‡î Õ‡î Õ‡î( Õ‡#î) Õ‡$î4 Õ‡/íî Õê
î Õêñî Õë
î Õëî Õ·î Õ·î Õ·î Õ·íî Õê
î Õê‹ î Õë
î Õëî Õ‚î Õ‚î Õ‚î Õ‚î Õ‚î Õ‚î Õ‚î  Õ‚î+ Õ‚&î- Õ‚(î. Õ‚)î0 Õ‚+î4 Õ‚/î5 Õ‚0îÃ@ Õ‚;îÃB Õ‚=íî Õê
î Õêòî Õë
î Õëî Õ„î Õ„î Õ„î Õ„î Õ„î* Õ„%íî Õ‰î Õ‰êêîî Õíî Õíî# Õíî' Õíìî Õöî Õöî Õöîî Õõî Õõî Õõî Õõñî Õúî Õúî Õúî Õúî Õúî$ Õú"îî Õùî Õùî Õùî Õùëî Õûñî Õíî Õíî Õìî Õìî Õìî Õìñî Õíî Õíî Õîî Õîî Õîî Õîñî Õíî Õíî Õïî" Õïî# Õïî, Õï(ñî Õíî Õíî Õñî Õñî Õñî& Õñ"ñî Õíî Õíî Õóî Õóî  Õóî" Õó‹ î Õíî Õíî Õòî Õòî Õòî Õòî Õòî Õòî" Õòî# Õòî. Õò*î0 Õò,î1 Õò-î3 Õò/î7 Õò3î8 Õò4îÃC Õò?îÃE ÕòÃAòî Õíî Õíî Õôî Õôî Õôî Õôî  Õôî- Õô)íî Õöî Õöóî Õíî Õíî Õüî Õüî Õüî Õüî  Õü‹ î Õ†î- Õ†%î/ Õ†'î7 Õ†/î9 Õ†1î< Õ†4î> Õ†6îÃC Õ†;îÃE Õ†=îÃJ Õ†ÃBîÃK Õ†ÃCîÃS Õ†ÃKîÃU Õ†ÃMîÃW Õ†ÃOîÃZ Õ†ÃRîÃ\ Õ†ÃTóî Õ°î Õ°î Õ°î$ Õ°"î' Õ°%î+ Õ°)î, Õ°)îî Õ¢î Õ¢î Õ¢î Õ¢ïî Õ£î Õ£î Õ£î Õ£î  Õ£ ‹ î Õ§î1 Õ§'î3 Õ§)î; Õ§1î= Õ§3îÃ@ Õ§6îÃB Õ§8îÃG Õ§=îÃI Õ§?îÃN Õ§ÃDîÃO Õ§ÃEîÃW Õ§ÃMîÃY Õ§ÃOîÃ[ Õ§ÃQîÃ^ Õ§ÃTîÃ` Õ§ÃVóî Õ•î Õ•î Õ•î( Õ•$î+ Õ•'î, Õ•(î- Õ•(îî Õ¶î Õ¶î Õ¶î Õ¶ñî Õßî Õßî Õßî Õßî Õßî Õßñî Õ®î Õ®î Õ®î Õ®î! Õ®!î" Õ®!íî Õ©î Õ©êíî Õíî Õíêêóî Õ´î Õ´î Õ´î Õ´î Õ´î Õ´î  Õ´ êêîî Õ¨î Õ¨î/ Õ¨î3 Õ¨ìî  Õ¥î) Õ¥î* Õ¥îî Õµî$ Õµî& Õµî) Õµñî Õ∂î! Õ∂î# Õ∂î( Õ∂î) Õ∂î1 Õ∂'îî Õ∑î! Õ∑î# Õ∑î& Õ∑ëî Õ∏ñî Õ¨î Õ¨î Õ≠î$ Õ≠î% Õ≠î( Õ≠ñî Õ¨î Õ¨î ÕÆî% ÕÆî& ÕÆî( ÕÆñî Õ¨î Õ¨î ÕØî. ÕØ î/ ÕØ!î8 ÕØ*ñî Õ¨î Õ¨î Õ∞î( Õ∞î) Õ∞î2 Õ∞$ñî Õ¨î Õ¨î Õ±î+ Õ±î, Õ±î. Õ± ‹ î Õ¨î Õ¨î Õ≤î$ Õ≤î% Õ≤î' Õ≤î( Õ≤î* Õ≤î. Õ≤ î/ Õ≤!î: Õ≤,î< Õ≤.î= Õ≤/î? Õ≤1îÃC Õ≤5îÃD Õ≤6îÃO Õ≤ÃAîÃQ Õ≤ÃCòî Õ¨î Õ¨î Õ≥î& Õ≥î' Õ≥î+ Õ≥î, Õ≥î9 Õ≥+íî  Õ¥î) Õ¥óî Õ¨î Õ¨î Õπî& Õπî' Õπî* Õπî, Õπ‹ î Õ∫î9 Õ∫'î; Õ∫)îÃC Õ∫1îÃE Õ∫3îÃH Õ∫6îÃJ Õ∫8îÃO Õ∫=îÃQ Õ∫?îÃV Õ∫ÃDîÃW Õ∫ÃEîÃ_ Õ∫ÃMîÃa Õ∫ÃOîÃc Õ∫ÃQîÃf Õ∫ÃTîÃh Õ∫ÃVóî  Õªî$ Õªî% Õªî0 Õª$î3 Õª'î7 Õª+î8 Õª+îî Õºî Õºî Õºî Õºïî ÕΩî& ÕΩî' ÕΩî* ÕΩ î, ÕΩ"‹ î  Õæî= Õæ)î? Õæ+îÃG Õæ3îÃI Õæ5îÃL Õæ8îÃN Õæ:îÃS Õæ?îÃU ÕæÃAîÃZ ÕæÃFîÃ[ ÕæÃGîÃc ÕæÃOîÃe ÕæÃQîÃg ÕæÃSîÃj ÕæÃVîÃl ÕæÃXóî$ Õøî( Õøî) Õøî4 Õø&î7 Õø)î8 Õø*î9 Õø*îî  Õ¿î! Õ¿î" Õ¿î# Õ¿ñî Õ¡î Õ¡î Õ¡î" Õ¡î# Õ¡î$ Õ¡ñî Õ¬î  Õ¬î! Õ¬î+ Õ¬!î- Õ¬#î. Õ¬#íî Õ√î Õ√êíî Õ¨î Õ¨êëî Õƒëî Õƒêêîî Õ≈î Õ≈î/ Õ≈î3 Õ≈ìî  ÕÕî) ÕÕî* ÕÕîî ÕŒî$ ÕŒî& ÕŒî) ÕŒñî Õœî! Õœî# Õœî( Õœî) Õœî0 Õœ&îî Õ–î! Õ–î# Õ–î& Õ–ëî Õ—ñî Õ≈î Õ≈î Õ∆î$ Õ∆î% Õ∆î( Õ∆ñî Õ≈î Õ≈î Õ«î% Õ«î& Õ«î( Õ«ñî Õ≈î Õ≈î Õ»î. Õ» î/ Õ»!î8 Õ»*ñî Õ≈î Õ≈î Õ…î( Õ…î) Õ…î2 Õ…$ñî Õ≈î Õ≈î Õ î+ Õ î, Õ î. Õ  ‹ î Õ≈î Õ≈î ÕÀî$ ÕÀî% ÕÀî' ÕÀî( ÕÀî* ÕÀî. ÕÀ î/ ÕÀ!î: ÕÀ,î< ÕÀ.î= ÕÀ/î? ÕÀ1îÃC ÕÀ5îÃD ÕÀ6îÃO ÕÀÃAîÃQ ÕÀÃCòî Õ≈î Õ≈î ÕÃî& ÕÃî' ÕÃî+ ÕÃî, ÕÃî9 ÕÃ+íî  ÕÕî) ÕÕóî Õ≈î Õ≈î Õ“î& Õ“î' Õ“î* Õ“î, Õ“‹ î Õ”î9 Õ”'î; Õ”)îÃC Õ”1îÃE Õ”3îÃH Õ”6îÃJ Õ”8îÃO Õ”=îÃQ Õ”?îÃV Õ”ÃDîÃW Õ”ÃEîÃ_ Õ”ÃMîÃa Õ”ÃOîÃc Õ”ÃQîÃf Õ”ÃTîÃh Õ”ÃVóî  Õ‘î$ Õ‘î% Õ‘î0 Õ‘$î3 Õ‘'î7 Õ‘+î8 Õ‘+îî Õ’î Õ’î Õ’î Õ’ïî Õ÷î& Õ÷î' Õ÷î* Õ÷ î, Õ÷"‹ î  Õ◊î= Õ◊)î? Õ◊+îÃG Õ◊3îÃI Õ◊5îÃL Õ◊8îÃN Õ◊:îÃS Õ◊?îÃU Õ◊ÃAîÃZ Õ◊ÃFîÃ[ Õ◊ÃGîÃc Õ◊ÃOîÃe Õ◊ÃQîÃg Õ◊ÃSîÃj Õ◊ÃVîÃl Õ◊ÃXóî$ Õÿî( Õÿî) Õÿî4 Õÿ&î7 Õÿ)î8 Õÿ*î9 Õÿ*îî  ÕŸî! ÕŸî" ÕŸî# ÕŸñî Õ⁄î Õ⁄î Õ⁄î" Õ⁄î# Õ⁄î$ Õ⁄ñî Õ€î  Õ€î! Õ€î* Õ€ î, Õ€"î- Õ€"íî Õ‹î Õ‹êíî Õ≈î Õ≈êëî Õ›êêíî Õê
î Õêíî Õë
î Õëíî Ã˝î Ã˝íî Ã˚î Ã˚íî Ã¸î Ã¸êíî ÕÌî ÕÌíî ÕÓî ÕÓ	íî ÕÌî ÕÌñî ÕÓî ÕÓ	î Õzî Õzî Õzî Õzíî ÕÌî ÕÌûî ÕÓî ÕÓ	î Õ{î Õ{î Õ{î Õ{î Õ{î Õ{î! Õ{î# Õ{î) Õ{ î+ Õ{"î, Õ{#î. Õ{%íî ÕÌî ÕÌñî ÕÓî ÕÓ	î Õ|î Õ|î  Õ|î) Õ| íî ÕÌî ÕÌïî ÕÓî ÕÓ	î Õ}î Õ}î Õ}òî Õ~î Õ~î Õ~î Õ~î Õ~î Õ~î Õ~î! Õ~îî Õî Õî Õî  Õëî ÕÄêêíî ÕÔî ÕÔìî Õ	î Õî Õîî Õ
î Õî Õî Õñî Õ
î Õî Õî Õî Õî% Õîî Õ
î Õî Õî Õëî Õ	ñî ÕÔî ÕÔî Õ	î Õî Õî Õòî ÕÔî ÕÔî Õ	î Õî Õî- Õ#î. Õ$î4 Õ*óî ÕÔî ÕÔî Õ	î Õî Õî Õî  Õíî Õî Õíî Õî Õ	‹ î ÕÔî ÕÔî Õ		î Õ	î Õ	î Õ	î Õ	î Õ	î" Õ	î# Õ	î, Õ	"î. Õ	$î/ Õ	%î1 Õ	'î5 Õ	+î6 Õ	,î? Õ	5îÃA Õ	7òî ÕÔî ÕÔî Õ
	î Õ
î Õ
î Õ
î  Õ
î+ Õ
!íî Õ	î Õêêíî Õ
î Õìî Õıî Õıî Õıîî Õˆî Õˆî Õˆî Õˆñî Õ˜î Õ˜î Õ˜î Õ˜î Õ˜î% Õ˜#ëî Õ¯ñî Õ
î Õî ÕÒî ÕÒî ÕÒî ÕÒñî Õ
î Õî ÕÚî ÕÚî ÕÚî ÕÚñî Õ
î Õî ÕÛî ÕÛî ÕÛî% ÕÛ ‹ î Õ
î Õî ÕÙî ÕÙî ÕÙî ÕÙî ÕÙî ÕÙî! ÕÙî" ÕÙî* ÕÙ%î, ÕÙ'î- ÕÙ(î/ ÕÙ*î3 ÕÙ.î4 ÕÙ/î< ÕÙ7î> ÕÙ9íî Õıî Õıêêîî Õ˘
î Õ˘î Õ˘î Õ˘ìî Õ˛î Õ˛î Õ˛îî Õˇî Õˇî Õˇî Õˇñî Õ î Õ î Õ î Õ î Õ î$ Õ "îî Õî Õî Õî Õëî Õñî Õ˘
î Õ˘î Õ˙î Õ˙î Õ˙î Õ˙ñî Õ˘
î Õ˘î Õ˚î Õ˚î Õ˚î$ Õ˚ öî Õ˘
î Õ˘î Õ¸î Õ¸î Õ¸î Õ¸î Õ¸î Õ¸î  Õ¸î" Õ¸‹ î Õ˘
î Õ˘î Õ˝î Õ˝î Õ˝î Õ˝î Õ˝î Õ˝î  Õ˝î! Õ˝î) Õ˝%î+ Õ˝'î, Õ˝(î. Õ˝*î2 Õ˝.î3 Õ˝/î; Õ˝7î= Õ˝9íî Õ˛î Õ˛êíî Õ˘
î Õ˘íî ÕÔî ÕÔêíî Õî Õìî Õ.	î Õ.î Õ.îî Õ/
î Õ/î Õ/î Õ/ñî Õ0
î Õ0î Õ0î Õ0î Õ0î% Õ0îî Õ1
î Õ1î Õ1î Õ1ëî Õ2	ñî Õî Õî Õ'	î Õ'î Õ'î Õ'òî Õî Õî Õ(	î Õ(î Õ(î- Õ(#î. Õ($î4 Õ(*óî Õî Õî Õ)	î Õ)î Õ)î Õ)î  Õ)òî Õ*
î Õ*î Õ*î Õ*î  Õ*î* Õ*$î+ Õ*%î, Õ*%íî Õ+î Õ+	‹ î Õî Õî Õ,	î Õ,î Õ,î Õ,î Õ,î Õ,î" Õ,î# Õ,î, Õ,"î. Õ,$î/ Õ,%î1 Õ,'î5 Õ,+î6 Õ,,î? Õ,5îÃA Õ,7òî Õî Õî Õ-	î Õ-î Õ-î Õ-î  Õ-î+ Õ-!íî Õ.	î Õ.êêíî Õ
î Õìî Õî Õî Õîî Õî Õî Õî Õñî Õî Õî Õî Õî Õî$ Õ"îî Õî Õî Õî Õëî Õñî Õ
î Õî Õî Õî Õî Õñî Õ
î Õî Õî Õî Õî Õñî Õ
î Õî Õî Õî Õî% Õ ‹ î Õ
î Õî Õî Õî Õî Õî Õî Õî! Õî" Õî* Õ%î, Õ'î- Õ(î/ Õ*î3 Õ.î4 Õ/î< Õ7î> Õ9íî Õî Õêêîî Õ
î Õî Õî Õìî Õ!î Õ!î Õ!îî Õ"î Õ"î Õ"î Õ"ñî Õ#î Õ#î Õ#î Õ#î Õ#î$ Õ#"îî Õ$î Õ$î Õ$î Õ$ëî Õ%ñî Õ
î Õî Õî Õî Õî Õñî Õ
î Õî Õî Õî Õî$ Õ öî Õ
î Õî Õî Õî Õî Õî Õî Õî  Õî" Õ‹ î Õ
î Õî Õ î Õ î Õ î Õ î Õ î Õ î  Õ î! Õ î) Õ %î+ Õ 'î, Õ (î. Õ *î2 Õ .î3 Õ /î; Õ 7î= Õ 9íî Õ!î Õ!êíî Õ
î Õíî Õî Õêíî Õ4î Õ4ìî ÕQ	î ÕQî ÕQîî ÕR
î ÕRî ÕRî ÕRñî ÕS
î ÕSî ÕSî ÕSî ÕSî% ÕSîî ÕT
î ÕTî ÕTî ÕTëî ÕU	ñî Õ4î Õ4î ÕJ	î ÕJî ÕJî ÕJòî Õ4î Õ4î ÕK	î ÕKî ÕKî- ÕK#î. ÕK$î4 ÕK*óî Õ4î Õ4î ÕL	î ÕLî ÕLî ÕLî  ÕLòî ÕM
î ÕMî ÕMî ÕMî  ÕMî* ÕM$î+ ÕM%î, ÕM%íî ÕNî ÕN	‹ î Õ4î Õ4î ÕO	î ÕOî ÕOî ÕOî ÕOî ÕOî" ÕOî# ÕOî, ÕO"î. ÕO$î/ ÕO%î1 ÕO'î5 ÕO+î6 ÕO,î? ÕO5îÃA ÕO7òî Õ4î Õ4î ÕP	î ÕPî ÕPî ÕPî  ÕPî+ ÕP!íî ÕQ	î ÕQêêíî Õ5
î Õ5ìî Õ:î Õ:î Õ:îî Õ;î Õ;î Õ;î Õ;ñî Õ<î Õ<î Õ<î Õ<î Õ<î$ Õ<"îî Õ=î Õ=î Õ=î Õ=ëî Õ>ñî Õ5
î Õ5î Õ6î Õ6î Õ6î Õ6ñî Õ5
î Õ5î Õ7î Õ7î Õ7î Õ7ñî Õ5
î Õ5î Õ8î Õ8î Õ8î% Õ8 ‹ î Õ5
î Õ5î Õ9î Õ9î Õ9î Õ9î Õ9î Õ9î! Õ9î" Õ9î* Õ9%î, Õ9'î- Õ9(î/ Õ9*î3 Õ9.î4 Õ9/î< Õ97î> Õ99íî Õ:î Õ:êêîî Õ?
î Õ?î Õ?î Õ?ìî ÕDî ÕDî ÕDîî ÕEî ÕEî ÕEî ÕEñî ÕFî ÕFî ÕFî ÕFî ÕFî$ ÕF"îî ÕGî ÕGî ÕGî ÕGëî ÕHñî Õ?
î Õ?î Õ@î Õ@î Õ@î Õ@ñî Õ?
î Õ?î ÕAî ÕAî ÕAî$ ÕA öî Õ?
î Õ?î ÕBî ÕBî ÕBî ÕBî ÕBî ÕBî  ÕBî" ÕB‹ î Õ?
î Õ?î ÕCî ÕCî ÕCî ÕCî ÕCî ÕCî  ÕCî! ÕCî) ÕC%î+ ÕC'î, ÕC(î. ÕC*î2 ÕC.î3 ÕC/î; ÕC7î= ÕC9íî ÕDî ÕDêíî Õ?
î Õ?íî Õ4î Õ4êíî ÕWî ÕWìî Õt	î Õtî Õtîî Õu
î Õuî Õuî Õuñî Õv
î Õvî Õvî Õvî Õvî% Õvîî Õw
î Õwî Õwî Õwëî Õx	ñî ÕWî ÕWî Õm	î Õmî Õmî Õmòî ÕWî ÕWî Õn	î Õnî Õnî- Õn#î. Õn$î4 Õn*óî ÕWî ÕWî Õo	î Õoî Õoî Õoî  Õoòî Õp
î Õpî Õpî Õpî  Õpî* Õp$î+ Õp%î, Õp%íî Õqî Õq	‹ î ÕWî ÕWî Õr	î Õrî Õrî Õrî Õrî Õrî" Õrî# Õrî, Õr"î. Õr$î/ Õr%î1 Õr'î5 Õr+î6 Õr,î? Õr5îÃA Õr7òî ÕWî ÕWî Õs	î Õsî Õsî Õsî  Õsî+ Õs!íî Õt	î Õtêêíî ÕX
î ÕXìî Õ]î Õ]î Õ]îî Õ^î Õ^î Õ^î Õ^ñî Õ_î Õ_î Õ_î Õ_î Õ_î$ Õ_"îî Õ`î Õ`î Õ`î Õ`ëî Õañî ÕX
î ÕXî ÕYî ÕYî ÕYî ÕYñî ÕX
î ÕXî ÕZî ÕZî ÕZî ÕZñî ÕX
î ÕXî Õ[î Õ[î Õ[î% Õ[ ‹ î ÕX
î ÕXî Õ\î Õ\î Õ\î Õ\î Õ\î Õ\î! Õ\î" Õ\î* Õ\%î, Õ\'î- Õ\(î/ Õ\*î3 Õ\.î4 Õ\/î< Õ\7î> Õ\9íî Õ]î Õ]êêîî Õb
î Õbî Õbî Õbìî Õgî Õgî Õgîî Õhî Õhî Õhî Õhñî Õiî Õiî Õiî Õiî Õiî$ Õi"îî Õjî Õjî Õjî Õjëî Õkñî Õb
î Õbî Õcî Õcî Õcî Õcñî Õb
î Õbî Õdî Õdî Õdî$ Õd öî Õb
î Õbî Õeî Õeî Õeî Õeî Õeî Õeî  Õeî" Õe‹ î Õb
î Õbî Õfî Õfî Õfî Õfî Õfî Õfî  Õfî! Õfî) Õf%î+ Õf'î, Õf(î. Õf*î2 Õf.î3 Õf/î; Õf7î= Õf9íî Õgî Õgêíî Õb
î Õbíî ÕWî ÕWíî ÕÌî ÕÌíî ÕÓî ÕÓ	íî ÃŒî ÃŒ
ëî ÕÜ‘rFñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹ëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ëî  Ãπ ëî  Ã∫ ëî  Ãª ëî  Ãº ëî  ÃΩ ëî  Ãæ ëî  Ãø ëî  Ã¿ ëî  Ã¡ ëî  Ã¬ ëî  Ã√ ëî  Ãƒ ëî  Ã≈ ëî  Ã∆ ëî  Ã« ëî  Ã» ëî  Ã… ëî  Ã  ëî  ÃÀ ëî  ÃÃ ëî  ÃÕ ëî  ÃŒ ëî  Ãœ ëî  Ã– ëî  Ã— ëî  Ã“ ëî  Ã” ëî  Ã‘ ëî  Ã’ ëî  Ã÷ ëî  Ã◊ ëî  Ãÿ ëî  ÃŸ ëî  Ã⁄ ëî  Ã€ ëî  Ã‹ ëî  Ã› ëî  Ãﬁ ëî  Ãﬂ ëî  Ã‡ ëî  Ã· ëî  Ã‚ ëî  Ã„ ëî  Ã‰ ëî  ÃÂ ëî  ÃÊ ëî  ÃÁ ëî  ÃË ëî  ÃÈ ëî  ÃÍ ëî  ÃÎ ëî  ÃÏ ëî  ÃÌ ëî  ÃÓ ëî  ÃÔ ëî  Ã ëî  ÃÒ ëî  ÃÚ ëî  ÃÛ ëî  ÃÙ ëî  Ãı ëî  Ãˆ ëî  Ã˜ ëî  Ã¯ ëî  Ã˘ ëî  Ã˙ ëî  Ã˚ ëî  Ã¸ ëî  Ã˝ ëî  Ã˛ ëî  Ãˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ‘rGíßmissing¶plugin√¶genAbc¬ê‘  ‘rHî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêêë‘rIï§type•start£end™specifiers¶source±ImportDeclarationÃÄÃøë‘rJï§type•start£end®imported•localØImportSpecifierÃâÃö‘rKî§type•start£end§name™IdentifierÃâÃö±NavigationManagerK™IdentifierÃâÃö±NavigationManager‘rLï§type•start£end•value£rawßLiteralÃ¢Ãæ∫../utils/NavigationManagerº'../utils/NavigationManager'